(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{363:function(n,e,r){"use strict";r.r(e);var t=r(0),o=Object(t.a)({},(function(){var n=this.$createElement;this._self._c;return this._m(0)}),[function(){var n=this.$createElement,e=this._self._c||n;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"错误监控"}},[this._v("错误监控")]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta >\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <script>\n        function monitorInit() {\n            const monitor = {               \n                url: '',                \n                performance: {},              \n                resources: {},                \n                errors: [],\n                user: {                    \n                    screen: screen.width,\n                    height: screen.height,                    \n                    platform: navigator.platform,                  \n                    userAgent: navigator.userAgent,                \n                    language: navigator.language,\n                },\n                addError(error) {\n                    const obj = {}\n                    const { type, msg, url, row, col } = error\n                    if (type) obj.type = type\n                    if (msg) obj.msg = msg\n                    if (url) obj.url = url\n                    if (row) obj.row = row\n                    if (col) obj.col = col\n                    obj.time = new Date().getTime()\n                    monitor.errors.push(obj)\n                },\n                reset() {\n                    window.performance && window.performance.clearResourceTimings()\n                    monitor.performance = getPerformance()\n                    monitor.resources = getResources()\n                    monitor.errors = []\n                },\n                clearError() {\n                    monitor.errors = []\n                },\n                upload() {             \n                },\n                setURL(url) {\n                    monitor.url = url\n                },\n            }\n\n            \n            const getPerformance = () => {\n                if (!window.performance) return\n                const timing = window.performance.timing\n                const performance = {\n                    redirect: timing.redirectEnd - timing.redirectStart,\n                    whiteScreen: whiteScreen,                    \n                    dom: timing.domComplete - timing.domLoading,                    \n                    load: timing.loadEventEnd - timing.navigationStart,                    \n                    unload: timing.unloadEventEnd - timing.unloadEventStart,                    \n                    request: timing.responseEnd - timing.requestStart,                    \n                    time: new Date().getTime(),\n                }\n                return performance\n            }\n\n            \n            const getResources = () => {\n                if (!window.performance) return\n                const data = window.performance.getEntriesByType('resource')\n                const resource = {\n                    xmlhttprequest: [],\n                    css: [],\n                    other: [],\n                    script: [],\n                    img: [],\n                    link: [],\n                    fetch: [],                    \n                    time: new Date().getTime(),\n                }\n                data.forEach(item => {\n                    const arry = resource[item.initiatorType]\n                    arry && arry.push({                        \n                        name: item.name,                        \n                        duration: item.duration.toFixed(2),                        \n                        size: item.transferSize,                        \n                        protocol: item.nextHopProtocol,\n                    })\n                })\n                return resource\n            }\n\n            window.onload = () => {  \n                if (window.requestIdleCallback) {\n                    window.requestIdleCallback(() => {\n                        monitor.performance = getPerformance()\n                        monitor.resources = getResources()\n                        console.log('页面性能信息')\n                        console.log(monitor.performance)\n                        console.log('页面资源信息')\n                        console.log(monitor.resources)\n                    })\n                } else {\n                    setTimeout(() => {\n                        monitor.performance = getPerformance()\n                        monitor.resources = getResources()\n                        console.log('页面性能信息')\n                        console.log(monitor.performance)\n                        console.log('页面资源信息')\n                        console.log(monitor.resources)\n                    }, 0)\n                }\n            }\n\n            \n            addEventListener('error', e => {\n                const target = e.target\n                if (target != window) {\n                    monitor.errors.push({\n                        type: target.localName,\n                        url: target.src || target.href,\n                        msg: (target.src || target.href) + ' is load error',                        \n                        time: new Date().getTime(),\n                    })\n                    console.log('所有的错误信息')\n                    console.log(monitor.errors)\n                }\n            }, true)\n\n            \n            window.onerror = function(msg, url, row, col, error) {\n                monitor.errors.push({\n                    type: 'javascript', \n                    row: row, \n                    col: col, \n                    msg: error && error.stack? error.stack : msg, \n                    url: url, \n                    time: new Date().getTime(), \n                })\n                console.log('所有的错误信息')\n                console.log(monitor.errors)\n            }\n\n            \n            addEventListener('unhandledrejection', e => {\n                monitor.errors.push({\n                    type: 'promise',\n                    msg: (e.reason && e.reason.msg) || e.reason || '',\n                    \n                    time: new Date().getTime(),\n                })\n                console.log('所有的错误信息')\n                console.log(monitor.errors)\n            })\n            return monitor\n        }\n        const monitor = monitorInit()\n    <\/script>\n    <link rel=\"stylesheet\" href=\"test.css\">\n    <title>Document</title>\n</head>\n<body>\n    <button>错误测试按钮1</button>\n    <button>错误测试按钮2</button>\n    <button>错误测试按钮3</button>\n    <img src=\"https://avatars3.githubusercontent.com/u/22117876?s=460&v=4\" alt=\"\">\n    <img src=\"test.png\" alt=\"\">\n<script src=\"192.168.10.15/test.js\"><\/script>\n<script>\ndocument.querySelector('.btn1').onclick = () => {\n    setTimeout(() => {\n        console.log(button)\n    }, 0)\n}\n\ndocument.querySelector('.btn2').onclick = () => {\n    new Promise((resolve, reject) => {\n        reject({\n            msg: 'test.js promise is error'\n        })\n    })\n}\n\ndocument.querySelector('.btn3').onclick = () => {\n    throw ('这是一个手动扔出的错误')\n}\n<\/script>\n</body>\n</html>\n")])])])])}],!1,null,null,null);e.default=o.exports}}]);