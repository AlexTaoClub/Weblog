(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{299:function(t,e,a){"use strict";a.r(e);var n=a(0),s=Object(n.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h3",{attrs:{id:"项目自动化部署"}},[t._v("项目自动化部署")]),a("h2",{attrs:{id:"ssh-copy-id"}},[t._v("ssh-copy-id")]),a("p",[t._v("使用ssh去登陆到远程服务器的脚本")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ssh-copy-id -i .ssh/id_rsa.pub  root@47.94.86.110\nssh root@47.94.86.110\n")])])]),a("h2",{attrs:{id:"nginx-安装"}},[t._v("nginx 安装")]),a("p",[t._v("安装服务器需要用到的模块")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("yum install -y gcc gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel\n")])])]),a("p",[t._v("提前创建好软件需要使用到的目录")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("mkdir -p /usr/local/nginx\nmkdir -p /var/log/nginx\nmkdir -p /var/temp/nginx\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("--prefix=/usr/local/nginx 指定服务安装到什么目录\n--error-log-path=/var/log/nginx/error.log  指定错误日志存放地址 \n/var/temp/nginx 存放代理过程中产生的临时文件\n")])])]),a("p",[t._v("1.下载 openssl (到官网查看最新的版本，可以下载最新的)\nwget -c http://www.openssl.org/source/openssl-1.0.1c.tar.gz\n将 openssl 解压（记住解压后的目录）\n2.到 nginx 官网下载最新的 nginx 源码， 解压 进入解压后的目录执行下面的代码，该命令是配置如何编译 nginx")]),a("p",[t._v("wget -c http://nginx.org/download/nginx-1.14.2.tar.gz")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("tar -tzvf xxx.tar.gz\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("./configure --prefix=/usr/local/nginx \\   \n--pid-path=/var/local/nginx/nginx.pid \\\n--lock-path=/var/lock/nginx/nginx.lock \\\n--error-log-path=/var/log/nginx/error.log \\\n--http-log-path=/var/log/nginx/access.log \\\n--with-openssl=/root/nginx/openssl-1.0.1c \\  # 这里使用 openssl 解压后的目录，需要修改！！！\n--with-http_gzip_static_module \\\n--with-http_ssl_module \\\n--with-threads \\\n--with-debug \\\n--with-http_v2_module \\\n--with-stream \\\n--http-client-body-temp-path=/var/temp/nginx/client \\\n--http-proxy-temp-path=/var/temp/nginx/proxy \\\n--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \\\n--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \\\n--http-scgi-temp-path=/var/temp/nginx/scgi\n编译\nmake\n将编译后的结果进行安装\nmake install\n")])])]),a("h4",{attrs:{id:"nginx-bash"}},[t._v("nginx - bash")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('#!/bin/bash\necho "----------nginx config start----------"\nmkdir -p /usr/local/nginx\nmkdir -p /var/log/nginx\nmkdir -p /var/temp/nginx\ncd ./nginx-1.14.2\n./configure --prefix=/usr/local/nginx --pid-path=/var/local/nginx/nginx.pid --lock-path=/var/lock/nginx/nginx.lock --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --with-openssl=/openssl-1.1.0g --with-http_gzip_static_module --with-http_ssl_module --with-threads --with-debug --with-http_v2_module --with-stream --http-client-body-temp-path=/var/temp/nginx/client --http-proxy-temp-path=/var/temp/nginx/proxy --http-fastcgi-temp-path=/var/temp/nginx/fastcgi --http-uwsgi-temp-path=/var/temp/nginx/uwsgi --http-scgi-temp-path=/var/temp/nginx/scgi\nmake\nmake install\necho "----------nginx config end----------"\n')])])]),a("h4",{attrs:{id:"nginx-未找到命令"}},[t._v("Nginx-未找到命令")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("vim /etc/profile\n\n在profile文件末尾，加上一行\n指向你的nginx的安装位置的sbin 目录\nPATH=$PATH:/usr/local/nginx/sbin\n\n重新加载环境\nsource /etc/profile   ===>>> \n\nnginx -v : nginx version: nginx/1.14.2\n")])])]),a("h2",{attrs:{id:"nvm安装"}},[t._v("nvm安装")]),a("p",[t._v("先卸载,在安装")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash\n")])])]),a("p",[t._v("通过cd ~/.nvm查看里面的所有文件，如果有nvm.sh就成功了")]),a("p",[t._v("本地运行nvm还是出现command not found，那么请检查是否含有.bash_profile文件")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ls -a | grep .bash_profile\n")])])]),a("p",[t._v("没有bash_profile则新建文件，正常.bash_profile内容")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('export NVM_DIR="$HOME/.nvm"\n[ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh"  # This loads nvm\n[ -s "$NVM_DIR/bash_completion" ] && \\. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion\n\nsource ~/.bashrc\n')])])]),a("p",[a("strong",[t._v("切换node默认版本")])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("nvm ls-remote\nnvm install stable(最新稳定棒)\nnvm alias default 版本号\n")])])]),a("h2",{attrs:{id:"pm2"}},[t._v("PM2")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npm install pm2 -g\n")])])]),a("h2",{attrs:{id:"私有化gitlab部署"}},[t._v("私有化gitlab部署")]),a("p",[t._v("http://www.git-scm.com.cn/1466.html")]),a("p",[t._v("https://www.cnblogs.com/sunmmi/articles/5847785.html\nhttps://blog.51cto.com/caiyuanji/2114796?cid=707746")]),a("h4",{attrs:{id:"gitlab服务"}},[t._v("gitlab服务")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("yum install -y curl openssh-server openssh-clients postfix cronie policycoreutils-python\n//10.x以后开始依赖policycoreutils-python\nsystemctl start postfix\nsystemctl enable postfix\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("wget -c https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-12.1.12-ce.0.el7.x86_64.rpm\nrpm -ivh gitlab-ce-12.1.12-ce.0.el7.x86_64.rpm     \ngitlab-ctl reconfigure\ngitlab-ctl stop\ngitlab-ctl start\ngitlab-ctl restart\n")])])]),a("h4",{attrs:{id:"注意事项"}},[t._v("注意事项")]),a("p",[a("strong",[t._v("配置修改需要重新生成配置文件，并且重启")])]),a("ul",[a("li",[t._v("gitlab自带的nginx 和 服务器已有的nginx冲突")])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("vim /etc/gitlab/gitlab.rb\nnginx['listen_port'] = 8899 (line 1046)\nexternal_url '域名:8899'\nunicorn['port'] = 8877(可以不修改  line 695)  \n\nvim /var/opt/gitlab/gitlab-rails/etc/unicorn.rb(可以不修改)\nlisten \"127.0.0.1:8877\", :tcp_nopush => true\n\nvim /var/opt/gitlab/nginx/conf/gitlab-http.conf\nlisten *:8899;\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("可以不用\ncd /usr/local/nginx/conf\n# gitlab socket 文件地址\n\nupstream gitlab {\n  # 7.x 版本在此位置\n  # server unix:/var/opt/gitlab/gitlab-rails/tmp/sockets/gitlab.socket;\n  # 8.0 位置\n  server unix://var/opt/gitlab/gitlab-rails/sockets/gitlab.socket;\n}\n\nserver {\n  listen    8899;  #修改端口号（nginx需要访问的端口号和gitlab.rb中 external_url 端口号保持一致  ）\n  server_name localhost;  \n  server_tokens off;    # don't show the version number, a security best practice\n  root /opt/gitlab/embedded/service/gitlab-rails/public;\n  client_max_body_size 250m;\n  #access_log  /var/log/gitlab/nginx/gitlab_access.log;\n  #error_log  /var/log/gitlab/nginx/gitlab_error.log;\n  location / {\n    try_files $uri $uri/index.html $uri.html @gitlab;\n  }\n  location @gitlab {\n    proxy_read_timeout 300; # Some requests take more than 30 seconds.\n    proxy_connect_timeout 300; # Some requests take more than 30 seconds.\n    proxy_redirect    off;\n    proxy_set_header  X-Forwarded-Proto $scheme;\n    proxy_set_header  Host              $http_host;\n    proxy_set_header  X-Real-IP        $remote_addr;\n    proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;\n    proxy_set_header  X-Frame-Options  SAMEORIGIN;\n    proxy_pass   http://127.0.0.1:8877; #和gitlab.rb中unicorn['port']  端口号保持一致\n  }\n  location ~ ^/(assets)/  {\n    root /opt/gitlab/embedded/service/gitlab-rails/public;\n    expires max;\n    add_header Cache-Control public;\n  }\n  error_page 502 /502.html;\n}\n")])])]),a("ul",[a("li",[t._v("网络问题，国内用户，建议使用清华大学的镜像源进行安装")])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("vim /etc/yum.repos.d/gitlab-ce.repo\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[gitlab-ce]\nname=gitlab-ce\nbaseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7\nrepo_gpgcheck=0\ngpgcheck=0\nenabled=1\ngpgkey=https://packages.gitlab.com/gpg.key\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("yum makecache\nyum install gitlab-ce\n")])])]),a("ul",[a("li",[t._v("命令（gitlab-ctl reconfigure 运行报错加 sudo）")])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("yum list | grep gitlab-ce\n\n/etc/gitlab/gitlab.rb          #gitlab配置文件\n/opt/gitlab                    #gitlab的程序安装目录\n/var/opt/gitlab                #gitlab目录数据目录\n/var/opt/gitlab/git-data       #存放仓库数据\ngitlab-ctl reconfigure         #重新加载配置\ngitlab-ctl status              #查看当前gitlab所有服务运行状态\ngitlab-ctl stop                #停止gitlab服务\ngitlab-ctl stop nginx          #单独停止某个服务\ngitlab-ctl tail                #查看所有服务的日志\n\nGitlab的服务构成：\nnginx：                 静态web服务器\ngitlab-workhorse        轻量级反向代理服务器\nlogrotate              日志文件管理工具\npostgresql             数据库\nredis                  缓存数据库\nsidekiq                用于在后台执行队列任务（异步执行）   \n")])])]),a("ul",[a("li",[t._v("Gitlab 汉化补丁( 新版本自带本地化 )")])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("cat /opt/gitlab/embedded/service/gitlab-rails/VERSION  ==>> 12.1.12     #查看安装版本，保证安装与汉化包版本一致\n\ngit clone https://gitlab.com/xhang/gitlab.git\n# 克隆 GitLab.com 仓库\ngit clone https://gitlab.com/larryli/gitlab.git\n＃或 Gitcafe.com 镜像，速度更快\ngit clone https://gitcafe.com/larryli/gitlab.git\n\ncd gitlab\ngit branch -a\ngit diff remotes/origin/12-1-stable remotes/origin/12-1-stable-zh > /tmp/12.1.12-zh.diff\ngitlab-ctl stop\n\npatch -d /opt/gitlab/embedded/service/gitlab-rails -p1 < /tmp/10.0.0-zh.diff\n或者 \n# 应用汉化补丁\ncd /opt/gitlab/embedded/service/gitlab-rails\ngit apply /tmp/12.12-zh.diff \n\n\ngitlab-ctl start\ngitlab-ctl reconfigure\n")])])]),a("h2",{attrs:{id:"jenkins"}},[t._v("Jenkins")]),a("h4",{attrs:{id:"配置修改建议重启jenkins（service-jenkins-restart），感觉缓存严重"}},[t._v("配置修改建议重启Jenkins（service jenkins restart），感觉缓存严重")]),a("h3",{attrs:{id:"安装"}},[t._v("安装")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("yum install java\njava -version\nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("rpm -ql jenkins                            查看安装目录\ncat /etc/sysconfig/jenkins | more          查看Jenkins端口（默认8080，酌情修改）\nservice start jenkins                      启动Jenkins\n")])])]),a("h3",{attrs:{id:"系统插件配置"}},[t._v("系统插件配置")]),a("h5",{attrs:{id:"git-地址配置"}},[t._v("Git - 地址配置")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("首先服务器查看 git \nwhereis git    --\x3e> git: /usr/local/git /usr/local/git/bin/git /usr/local/git/libexec/git-core/git\n选择带有 “/bin/git” 的路径  => /usr/local/git/bin/git\n如果没有 “/bin/git” 则添加  => /usr/local/git => /usr/local/git/bin/git\n\n系统设置 - 全局工具配置 - Git\nPath to Git executable : /usr/local/git/bin/git\n")])])]),a("h5",{attrs:{id:"git-parameter-参数构建化"}},[t._v("Git Parameter - 参数构建化")]),a("ul",[a("li",[t._v("常规参数配置")])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("常规参数配置 - 参数化构建过程\n\nGit参数\n名称  masterBranch ( 这个名称需要在源码管理Git处使用 $masterBranch )\n\n🌰\nname ： masterBranch\ndes  ： 分支\n参数类型 ： 分支\n默认值 ： origin/master\n\n源码管理 - Git - Branches to build\n指定分支 ：$masterBranch\n")])])]),a("h5",{attrs:{id:"publish-over-ssh-服务器自动化"}},[t._v("Publish over SSH - 服务器自动化")]),a("ul",[a("li",[t._v("基础 - 配置项")])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("系统管理 - 系统配置 - Publish over SSH\n\nPassphrase：密码（key的密码，没设置就是空）\nPath to key：key文件（私钥）的路径\nKey：将私钥复制到这个框中(path to key和key写一个即可)\n\nSSH Servers的配置：\nSSH Server Name：标识的名字\nHostname：需要连接ssh的主机名或ip地址（建议ip）\nUsername：用户名\nRemote Directory：远程目录（用于接收Jenkins传过来的代码）\n\n🌰：\nName                   aliyun\nHostname               47.94.86.110\nUsername               root\nRemote Directory       /\n\n配置测试\nTest Configuration  ==>> Success\n")])])]),a("ul",[a("li",[t._v("构建后操作 - 配置项")])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("构建后操作 - 配置项 - Send build artifacts over SSH\n\nName:选择一个你配好的ssh服务器\nSource files ：写你要传输的文件路径\nRemove prefix ：要去掉的前缀，不写远程服务器的目录结构将和Source files写的一致\nRemote directory ：写你要部署在远程服务器的那个目录地址下，不写就是SSH Servers配置里默认远程目录\nExec command ：传输完了要执行的命令，我这里执行了解压缩和解压缩完成后删除压缩包2个命令\n\n🌰：\nSSH Publishers\n  SSH Scrver\n  \tName ： aliyun\n  Transfer Set\n  \tSource files ： build/build.tar.gz\n  \tRemove prefix ： build/\n  \tRemote directory ： /Alex/react-cli/\n\t\tExec command ：  cd /Alex/react-cli\n                     tar -zxvf build.tar.gz\n                     rm -rf build.tar.gz\n")])])]),a("h5",{attrs:{id:"nodejs-node-版本切换（解决yarn-npm-找不到的问题）"}},[t._v("Nodejs - node 版本切换（解决yarn/npm 找不到的问题）")]),a("ul",[a("li",[t._v("基础 - 配置项")])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("安装\n系统管理 - 插件管理 - NodeJs\n\n配置\n系统设置 - 全局工具配置 - NodeJS  选择版本配置即可\n")])])]),a("ul",[a("li",[t._v("构建环境 - 配置项")])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("选中 Provide Node & npm bin/ folder to PATH\n选择 需要运行的Node环境\n")])])]),a("h3",{attrs:{id:"注意事项-2"}},[t._v("注意事项")]),a("ul",[a("li",[t._v("git  ls-remote -h ...  什么的报错（原因 Jenkins git 版本太低）")])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('卸载服务器  git\nyum remove -y git\n\n重新源码安装 git\nyum -y install libcurl-devel expat-devel curl-devel  gettext-devel openssl-devel zlib-devel\nyum -y install  gcc perl-ExtUtils-MakeMaker\ncd /\nwget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.1.1.tar.gz\ntar -zvxf git-2.1.1.tar.gz\ncd git-2.1.1\nmake prefix=/usr/local/git all\nmake prefix=/usr/local/git install\n\n添加环境变量\necho "export PATH=$PATH:/usr/local/git/bin" >> /etc/bashrc\nsource /etc/bashrc\n\n查看最新 git 信息\ngit --version  --\x3e> git version 2.1.1\nwhereis git    --\x3e> git: /usr/local/git /usr/local/git/bin/git /usr/local/git/libexec/git-core/git\n')])])]),a("h2",{attrs:{id:"gitlab-jenkins-自动化部署"}},[t._v("gitlab + jenkins 自动化部署")]),a("ul",[a("li",[a("p",[t._v("新建Jenkns项目")])]),a("li",[a("p",[t._v("常规参数配置")])]),a("li",[a("p",[t._v("源码管理配置")]),a("ul",[a("li",[t._v("git  - 配置仓库地址 ， 添加帐号凭证及权限（passworld 或者 ssh）")])])]),a("li",[a("p",[t._v("构建触发器")]),a("ul",[a("li",[t._v("Build when a change is pushed to GitLab.  URL: http://47.11.11.11./project/react-cli")])]),a("p",[t._v("获取当前项目地址   http://47.11.11.11./project/react-cli")]),a("p",[t._v("生成 Secret token(安全令牌)  12425b353j6lk3j6lk47l47l")]),a("ul",[a("li",[t._v("geilab 项目里面配置")])]),a("p",[t._v("设置 - 集成  ==>> 将jenkins里获取的    url + Secret token  分别配置在gitlab中的 url Secret Token，及完成了gitlab Webhooks 配置")])]),a("li",[a("p",[t._v("构建环境")]),a("p",[t._v("配置node    "),a("code",[t._v("Provide Node & npm bin/ folder to PATH")])])]),a("li",[a("p",[t._v("构建")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#!/bin/bash\nyarn\nyarn build\ntar -zcvf build.tar.gz *\n")])])])])}],!1,null,null,null);e.default=s.exports}}]);