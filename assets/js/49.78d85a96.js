(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{301:function(t,e,n){"use strict";n.r(e);var s=n(0),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"react-应用"}},[t._v("React 应用")]),t._m(0),n("h2",{attrs:{id:"代码规范"}},[t._v("代码规范")]),n("p",[n("a",{attrs:{href:"https://nefe.github.io/one-design-docs/#/docs-code-code",target:"_blank",rel:"noopener noreferrer"}},[t._v("Q A"),n("OutboundLink")],1)]),t._m(1),n("h2",{attrs:{id:"vdom-diff算法"}},[t._v("VDOM  + Diff算法")]),t._m(2),t._m(3),t._m(4),t._m(5),n("p",[t._v("经过 Diff 算法会计算出 Virtual DOM 的差异，然后将这些差异进行实际的DOM操作更新页面。")]),n("h2",{attrs:{id:"diff算法的核心内容"}},[t._v("diff算法的核心内容")]),n("h3",{attrs:{id:"更新流程"}},[t._v("更新流程")]),t._m(6),t._m(7),t._m(8),t._m(9),t._m(10),n("h3",{attrs:{id:"_3-1-patch函数"}},[t._v("3.1 patch函数")]),t._m(11),t._m(12),n("h3",{attrs:{id:"_3-2-patchvnode函数"}},[t._v("3.2 patchVnode函数")]),t._m(13),t._m(14),n("h3",{attrs:{id:"_3-3-updatechildren函数"}},[t._v("3.3 updateChildren函数")]),t._m(15),t._m(16),t._m(17),t._m(18),t._m(19),t._m(20),n("h2",{attrs:{id:"常用组件"}},[t._v("常用组件")]),t._m(21),n("h2",{attrs:{id:"生命周期"}},[t._v("生命周期")]),n("h3",{attrs:{id:"_1-react的生命周期有哪些？"}},[t._v("1. React的生命周期有哪些？")]),n("p",[t._v("React 通常将组件生命周期分为三个阶段：")]),t._m(22),t._m(23),n("h4",{attrs:{id:"_1）组件挂载阶段"}},[t._v("1）组件挂载阶段")]),n("p",[t._v("挂载阶段组件被创建，然后组件实例插入到 DOM 中，完成组件的第一次渲染，该过程只会发生一次，在此阶段会依次调用以下这些方法：")]),t._m(24),n("h5",{attrs:{id:"（1）constructor"}},[t._v("（1）constructor")]),t._m(25),t._m(26),n("p",[t._v("constructor中通常只做两件事：")]),t._m(27),t._m(28),n("h5",{attrs:{id:"（2）getderivedstatefromprops"}},[t._v("（2）getDerivedStateFromProps")]),t._m(29),t._m(30),t._m(31),n("h5",{attrs:{id:"（3）render"}},[t._v("（3）render")]),t._m(32),t._m(33),n("h5",{attrs:{id:"（4）componentdidmount"}},[t._v("（4）componentDidMount()")]),n("p",[t._v("componentDidMount()会在组件挂载后（插入 DOM 树中）立即调。该阶段通常进行以下操作：")]),t._m(34),n("h4",{attrs:{id:"_2）组件更新阶段"}},[t._v("2）组件更新阶段")]),t._m(35),t._m(36),n("h5",{attrs:{id:"（1）shouldcomponentupdate"}},[t._v("（1）shouldComponentUpdate")]),t._m(37),n("p",[t._v("在说这个生命周期函数之前，来看两个问题：")]),t._m(38),t._m(39),t._m(40),t._m(41),t._m(42),t._m(43),n("h5",{attrs:{id:"（2）getsnapshotbeforeupdate"}},[t._v("（2）getSnapshotBeforeUpdate")]),t._m(44),t._m(45),n("h5",{attrs:{id:"（3）componentdidupdate"}},[t._v("（3）componentDidUpdate")]),n("p",[t._v("componentDidUpdate() 会在更新后会被立即调用，首次渲染不会执行此方法。 该阶段通常进行以下操作：")]),t._m(46),t._m(47),n("p",[t._v("该方法有三个参数：")]),t._m(48),n("h4",{attrs:{id:"_3）组件卸载阶段"}},[t._v("3）组件卸载阶段")]),n("p",[t._v("卸载阶段只有一个生命周期函数，componentWillUnmount() 会在组件卸载及销毁之前直接调用。在此方法中执行必要的清理操作：")]),t._m(49),t._m(50),n("h4",{attrs:{id:"_4）错误处理阶段"}},[t._v("4）错误处理阶段")]),n("p",[t._v("componentDidCatch(error, info)，此生命周期在后代组件抛出错误后被调用。 它接收两个参数∶")]),t._m(51),t._m(52),t._m(53),t._m(54),n("h3",{attrs:{id:"_2-react-废弃了哪些生命周期？为什么？"}},[t._v("2. React 废弃了哪些生命周期？为什么？")]),n("p",[t._v("被废弃的三个函数都是在render之前，因为fber的出现，很可能因为高优先级任务的出现而打断现有任务导致它们会被执行多次。另外的一个原因则是，React想约束使用者，好的框架能够让人不得已写出容易维护和扩展的代码，这一点又是从何谈起，可以从新增加以及即将废弃的生命周期分析入手")]),t._m(55),n("p",[t._v("首先这个函数的功能完全可以使用componentDidMount和 constructor来代替，异步获取的数据的情况上面已经说明了，而如果抛去异步获取数据，其余的即是初始化而已，这些功能都可以在constructor中执行，除此之外，如果在 willMount 中订阅事件，但在服务端这并不会执行 willUnMount事件，也就是说服务端会导致内存泄漏所以componentWilIMount完全可以不使用，但使用者有时候难免因为各 种各样的情况在 componentWilMount中做一些操作，那么React为了约束开发者，干脆就抛掉了这个API")]),t._m(56),n("p",[t._v("在老版本的 React 中，如果组件自身的某个 state 跟其 props 密切相关的话，一直都没有一种很优雅的处理方式去更新 state，而是需要在 componentWilReceiveProps 中判断前后两个 props 是否相同，如果不同再将新的 props更新到相应的 state 上去。这样做一来会破坏 state 数据的单一数据源，导致组件状态变得不可预测，另一方面也会增加组件的重绘次数。类似的业务需求也有很多，如一个可以横向滑动的列表，当前高亮的 Tab 显然隶属于列表自身的时，根据传入的某个值，直接定位到某个 Tab。为了解决这些问题，React引入了第一个新的生命周期：getDerivedStateFromProps。它有以下的优点∶")]),t._m(57),t._m(58),n("p",[t._v("与 componentWillReceiveProps 类似，许多开发者也会在 componentWillUpdate 中根据 props 的变化去触发一些回调 。 但不论是 componentWilReceiveProps 还 是 componentWilUpdate，都有可能在一次更新中被调用多次，也就是说写在这里的回调函数也有可能会被调用多次，这显然是不可取的。与 componentDidMount 类 似， componentDidUpdate 也不存在这样的问题，一次更新中 componentDidUpdate 只会被调用一次，所以将原先写在 componentWillUpdate 中 的 回 调 迁 移 至 componentDidUpdate 就可以解决这个问题。")]),n("p",[t._v("另外一种情况则是需要获取DOM元素状态，但是由于在fber中，render可打断，可能在wilMount中获取到的元素状态很可能与实际需要的不同，这个通常可以使用第二个新增的生命函数的解决 getSnapshotBeforeUpdate(prevProps, prevState)")]),t._m(59),n("p",[t._v("返回的值作为componentDidUpdate的第三个参数。与willMount不同的是，getSnapshotBeforeUpdate会在最终确定的render执行之前执行，也就是能保证其获取到的元素状态与didUpdate中获取到的元素状态相同。官方参考代码：")]),t._m(60),n("h2",{attrs:{id:"组件通讯"}},[t._v("组件通讯")]),t._m(61),n("h2",{attrs:{id:"指针问题"}},[t._v("指针问题")]),t._m(62),t._m(63),t._m(64),t._m(65),n("h2",{attrs:{id:"ref使用"}},[t._v("ref使用")]),n("h3",{attrs:{id:"单个ref"}},[t._v("单个ref")]),t._m(66),n("h3",{attrs:{id:"map-ref"}},[t._v("map ref")]),t._m(67),n("p",[t._v("Now, let's try it 👉")])])}),[function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("React是一个专注于构建用户界面的 Javascript Library.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("Redux + iron-redux + pont + kiwi")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("虚拟DOM")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[e("code",[this._v("virtual dom")]),this._v(" 实际上是对实际Dom的一个抽象，是一个 js 对象，从而解决浏览器操作真实DOM的性能问题。react所有的表层操作实际上是在操作"),e("code",[this._v("Virtual dom")]),this._v("。")]),e("p",[this._v("涉及到了两个核心要素：虚拟DOM、最小量更新。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("最小更新量")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("Diff的用途就是在新老虚拟DOM之间找到最小更新的部分，从而将该部分对应的DOM进行更新。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("Diff算法整个流程如下图所示：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1186ba2ede5b44bfa728d6fa5b9b7133~tplv-k3u1fbpfcp-watermark.image",alt:"Diff算法3.jpg"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("一、 首先比较一下新旧节点是不是同一个节点（可通过比较sel（选择器）和key（唯一标识）值是不是相同），不是同一个节点则进行暴力删除（注：先以旧节点为基准插入新节点，然后再删除旧节点）。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("二、 若是同一个节点则需要进一步比较")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("完全相同，不做处理")]),e("li",[this._v("新节点内容为文本，直接替换完事")]),e("li",[this._v("新节点有子节点，这个时候就要仔细考虑一下了:若老节点没有子元素，则直接清空老节点，将新节点的子元素插入即可；若老节点有子元素则就需要按照上述的更新策略老搞定了")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("Diff算法的入口函数，主要判断新旧节点是不是同一个节点，然后交由不同的逻辑进行处理。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("export default function patch(oldVnode, newVnode) {\n    // 判断传入的第一个参数，是DOM节点还是虚拟节点\n    if (oldVnode.sel === '' || oldVnode.sel === undefined) {\n        // 传入的第一个参数是DOM节点，此时要包装成虚拟节点\n        oldVnode = vnode(oldVnode.tagName.toLowerCase(), {}, [], undefined, oldVnode);\n    }\n\n    // 判断oldVnode和newVnode是不是同一个节点\n    if (oldVnode.key === newVnode.key && oldVnode.sel === newVnode.sel) {\n        //是同一个节点，则进行精细化比较\n        patchVnode(oldVnode, newVnode);\n    }\n    else {\n        // 不是同一个节点，暴力插入新的，删除旧的\n        let newVnodeElm = createElement(newVnode);\n\n        // 将新节点插入到老节点之前\n        if (oldVnode.elm.parentNode && newVnodeElm) {\n            oldVnode.elm.parentNode.insertBefore(newVnodeElm, oldVnode.elm);\n        }\n        // 删除老节点\n        oldVnode.elm.parentNode.removeChild(oldVnode.elm);\n    }\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("该函数主要负责精细化比较，通过按照上述流程图中的逻辑依次判断属于哪一个分支，从而采取不同的处理逻辑。（思路清晰，算法太牛了）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("export default function patchVnode(oldVnode, newVnode) {\n    // 判断新旧vnode是否是同一个对象\n    if (oldVnode === newVnode) {\n        return;\n    }\n    // 判断vnode有没有text属性\n    if (newVnode.text !== undefined && (newVnode.children === undefined || newVnode.children.length === 0)) {\n        console.log('新vnode有text属性');\n        if (newVnode.text !== oldVnode.text) {\n            oldVnode.elm.innerText = newVnode.text;\n        }\n    }\n    else {\n        // 新vnode没有text属性，有children\n        console.log('新vnode没有text属性');\n        // 判断老的有没有children\n        if (oldVnode.children !== undefined && oldVnode.children.length > 0) {\n            // 老的有children，新的也有children\n            updateChildren(oldVnode.elm, oldVnode.children, newVnode.children);\n        }\n        else {\n            // 老的没有children，新的有children\n            // 清空老的节点的内容\n            oldVnode.elm.innerHTML = '';\n            // 遍历新的vnode的子节点，创建DOM，上树\n            for (let i = 0; i < newVnode.children.length; i++) {\n                let dom = createElement(newVnode.children[i]);\n                oldVnode.elm.appendChild(dom);\n            }\n        }\n    }\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("核心函数，主要负责旧虚拟节点和新虚拟节点均存在子元素的情况，按照比较策略依次进行比较，最终找出子元素中变化的部分，实现最小更新。对于该部分，涉及到一些指针，如下所示：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69699849ff164f5a94ab45ffcfdf33b6~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("旧前指的就是更新前虚拟DOM中的头部指针")]),e("li",[this._v("旧后指的就是更新前虚拟DOM中的尾部指针")]),e("li",[this._v("新前指的就是更新后虚拟DOM中的头部指针")]),e("li",[this._v("新后指的就是更新后虚拟DOM中的尾部指针")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("按照上述的更新策略，上述旧虚拟DOM更新为新虚拟DOM的流程为：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("命中“新后旧前”策略，然后将信后对应的DOM节点（也就是节点1）移动到旧后节点（节点3）后面，然后旧前节点指针下移，新后节点指针上移。")]),e("li",[this._v("仍然命中“新后旧前”策略，做相同的操作，将节点2移动到旧后节点（节点3）后面，下移旧前节点，上移新后节点。")]),e("li",[this._v("命中“新前旧前”策略，DOM节点不变，旧前和新前节点均下移。")]),e("li",[this._v("跳出循环，移动结束。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("export default function updateChildren(parentElm, oldCh, newCh) {\n    // 旧前\n    let oldStartIdx = 0;\n    // 新前\n    let newStartIdx = 0;\n    // 旧后\n    let oldEndIdx = oldCh.length - 1;\n    // 新后\n    let newEndIdx = newCh.length - 1;\n    // 旧前节点\n    let oldStartVnode = oldCh[0];\n    // 旧后节点\n    let oldEndVnode = oldCh[oldEndIdx];\n    // 新前节点\n    let newStartVnode = newCh[0];\n    // 新后节点\n    let newEndVnode = newCh[newEndIdx];\n\n    let keyMap = null;\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        // 略过已经加undefined标记的内容\n        if (oldStartVnode == null || oldCh[oldStartIdx] === undefined) {\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null || oldCh[oldEndIdx] === undefined) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null || newCh[newStartIdx] === undefined) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null || newCh[newEndIdx] === undefined) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (checkSameVnode(oldStartVnode, newStartVnode)) {\n            // 新前与旧前\n            console.log('新前与旧前命中');\n            patchVnode(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (checkSameVnode(oldEndVnode, newEndVnode)) {\n            // 新后和旧后\n            console.log('新后和旧后命中');\n            patchVnode(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndVnode];\n        }\n        else if (checkSameVnode(oldStartVnode, newEndVnode)) {\n            console.log('新后和旧前命中');\n            patchVnode(oldStartVnode, newEndVnode);\n            // 当新后与旧前命中的时候，此时要移动节点，移动新后指向的这个节点到老节点旧后的后面\n            parentElm.insertBefore(oldStartVnode.elm, oldEndVnode.elm.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (checkSameVnode(oldEndVnode, newStartVnode)) {\n            // 新前和旧后\n            console.log('新前和旧后命中');\n            patchVnode(oldEndVnode, newStartVnode);\n            // 当新前和旧后命中的时候，此时要移动节点，移动新前指向的这个节点到老节点旧前的前面\n            parentElm.insertBefore(oldEndVnode.elm, oldStartVnode.elm);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            // 四种都没有命中\n            // 制作keyMap一个映射对象，这样就不用每次都遍历老对象了\n            if (!keyMap) {\n                keyMap = {};\n                for (let i = oldStartIdx; i <= oldEndIdx; i++) {\n                    const key = oldCh[i].key;\n                    if (key !== undefined) {\n                        keyMap[key] = i;\n                    }\n                }\n            }\n            // 寻找当前这项（newStartIdx）在keyMap中的映射的位置序号\n            const idxInOld = keyMap[newStartVnode.key];\n            if (idxInOld === undefined) {\n                // 如果idxInOld是undefined表示踏实全新的项，此时会将该项创建为DOM节点并插入到旧前之前\n                parentElm.insertBefore(createElement(newStartVnode), oldStartVnode.elm);\n            }\n            else {\n                // 如果不是undefined，则不是全新的项，则需要移动\n                const elmToMove = oldCh[idxInOld];\n                patchVnode(elmToMove, newStartVnode);\n                // 把这项设置为undefined，表示已经处理完这项了\n                oldCh[idxInOld] = undefined;\n                // 移动\n                parentElm.insertBefore(elmToMove.elm, oldStartVnode.elm);\n            }\n            // 指针下移，只移动新的头\n            newStartVnode = newCh[++newStartIdx];\n        }\n    }\n\n    // 循环结束后，处理未处理的项\n    if (newStartIdx <= newEndIdx) {\n        console.log('new还有剩余节点没有处理，要加项，把所有剩余的节点插入到oldStartIdx之前');\n        // 遍历新的newCh，添加到老的没有处理的之前\n        for (let i = newStartIdx; i <= newEndIdx; i++) {\n            // insertBefore方法可以自动识别null，如果是null就会自动排到队尾去\n            // newCh[i]现在还没有真正的DOM，所以要调用createElement函数变为DOM\n            parentElm.insertBefore(createElement(newCh[i]), oldCh[oldStartIdx].elm);\n        }\n    }\n    else if (oldStartIdx <= oldEndIdx) {\n        console.log('old还有剩余节点没有处理，要删除项');\n        // 批量删除oldStart和oldEnd指针之间的项\n        for (let i = oldStartIdx; i <= oldEndIdx; i++) {\n            if (oldCh[i]) {\n                parentElm.removeChild(oldCh[i].elm);\n            }\n        }\n    }\n}\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ol",[n("li",[n("code",[t._v("axios")]),t._v("("),n("code",[t._v("http")]),t._v("请求模块)")]),n("li",[n("code",[t._v("echarts-for-react")]),t._v("(可视化图表)")]),n("li",[n("code",[t._v("recharts")]),t._v("(基于react封装的图表)")]),n("li",[n("code",[t._v("nprogress")]),t._v("(顶部加载条)")]),n("li",[n("code",[t._v("react-draft-wysiwyg(")]),t._v("别人基于react的富文本封装)")]),n("li",[n("code",[t._v("react-draggable")]),t._v("(拖拽模块)")]),n("li",[n("code",[t._v("screenfull")]),t._v("(全屏插件)")]),n("li",[n("code",[t._v("photoswipe")]),t._v("(图片弹层查看插件)")]),n("li",[n("code",[t._v("animate.css")])]),n("li",[n("code",[t._v("redux Web")]),t._v(" (应用是一个状态机，视图与状态是一一对应的.所有的状态，保存在一个对象里面)")]),n("li",[n("code",[t._v("redux-logger")]),t._v(" 日志")]),n("li",[n("code",[t._v("Reselect")]),t._v(" 记忆组件")]),n("li",[n("code",[t._v("redux-thunk")]),t._v("(解决异步action的问题)")]),n("li",[n("code",[t._v("redux-saga")]),t._v(" (解决异步action的问题)")]),n("li",[n("code",[t._v("react-router-redux")]),t._v("(保持路由与应用状态(state)同步)")]),n("li",[n("code",[t._v("react-router-dom")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("装载阶段（Mount），组件第一次在DOM树中被渲染的过程；")]),e("li",[this._v("更新过程（Update），组件状态发生变化，重新更新渲染的过程；")]),e("li",[this._v("卸载过程（Unmount），组件从DOM树中被移除的过程；")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c6acaafdb0af45d78b4428ca25ca4160~tplv-k3u1fbpfcp-zoom-1.image",alt:"在这里插入图片描述"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("constructor")]),e("li",[this._v("getDerivedStateFromProps")]),e("li",[this._v("render")]),e("li",[this._v("componentDidMount")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("组件的构造函数，第一个被执行，若没有显式定义它，会有一个默认的构造函数，但是若显式定义了构造函数，我们必须在构造函数中执行 "),e("code",[this._v("super(props)")]),this._v("，否则无法在构造函数中拿到this。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果不初始化 state 或不进行方法绑定，则不需要为 React 组件实现构造函数"),e("strong",[this._v("Constructor")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("初始化组件的 state")]),e("li",[this._v("给事件处理方法绑定 this")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不要在构造函数中调用 setState，可以直接给 state 设置初始值")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" counter"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("handleClick "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleClick")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDerivedStateFromProps")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prevState"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("这是个静态方法，所以不能在这个函数里使用 "),n("code",[t._v("this")]),t._v("，有两个参数 "),n("code",[t._v("props")]),t._v(" 和 "),n("code",[t._v("state")]),t._v("，分别指接收到的新参数和当前组件的 "),n("code",[t._v("state")]),t._v(" 对象，这个函数会返回一个对象用来更新当前的 "),n("code",[t._v("state")]),t._v(" 对象，如果不需要更新必须返回 "),n("code",[t._v("null")]),t._v("。")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("该函数会在装载时，接收到新的 "),n("code",[t._v("props")]),t._v(" 或者调用了 "),n("code",[t._v("setState")]),t._v(" 和 "),n("code",[t._v("forceUpdate")]),t._v(" 时被调用。如当接收到新的属性想修改 "),n("code",[t._v("state")]),t._v(" ，就可以使用。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("render是React 中最核心的方法，一个组件中必须要有这个方法，它会根据状态 "),e("code",[this._v("state")]),this._v(" 和属性 "),e("code",[this._v("props")]),this._v(" 渲染组件。这个函数只做一件事，就是返回需要渲染的内容，所以不要在这个函数内做其他业务逻辑，通常调用该方法会返回以下类型中一个：")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[n("strong",[t._v("React 元素")]),t._v("：这里包括原生的 DOM 以及 React 组件；")]),n("li",[n("strong",[t._v("数组和 Fragment（片段）")]),t._v("：可以返回多个元素；")]),n("li",[n("strong",[t._v("Portals（插槽）")]),t._v("：可以将子元素渲染到不同的 DOM 子树种；")]),n("li",[n("strong",[t._v("字符串和数字")]),t._v("：被渲染成 DOM 中的 text 节点；")]),n("li",[n("strong",[t._v("布尔值或 null")]),t._v("：不渲染任何内容。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("执行依赖于DOM的操作；")]),e("li",[this._v("发送网络请求；（官方建议）")]),e("li",[this._v("添加订阅消息（会在componentWillUnmount取消订阅）；")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("当组件的 "),e("code",[this._v("props")]),this._v(" 改变了，或组件内部调用了 "),e("code",[this._v("setState/forceUpdate")]),this._v("，会触发更新重新渲染，这个过程可能会发生多次。这个阶段会依次调用下面这些方法：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("getDerivedStateFromProps")]),e("li",[this._v("shouldComponentUpdate")]),e("li",[this._v("render")]),e("li",[this._v("getSnapshotBeforeUpdate")]),e("li",[this._v("componentDidUpdate")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[this._v("shouldComponentUpdate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v("(")]),this._v("nextProps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v(",")]),this._v(" nextState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v(")")]),this._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("setState 函数在任何情况下都会导致组件重新渲染吗？例如下面这种情况：")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("number"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("number"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("如果没有调用 setState，props 值也没有变化，是不是组件就不会重新渲染？")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("第一个问题答案是 "),e("strong",[this._v("会")]),this._v(" ，第二个问题如果是父组件重新渲染时，不管传入的 props 有没有变化，都会引起子组件的重新渲染。")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("那么有没有什么方法解决在这两个场景下不让组件重新渲染进而提升性能呢？这个时候 "),n("code",[t._v("shouldComponentUpdate")]),t._v(" 登场了，这个生命周期函数是用来提升速度的，它是在重新渲染组件开始前触发的，默认返回 "),n("code",[t._v("true")]),t._v("，可以比较 "),n("code",[t._v("this.props")]),t._v(" 和 "),n("code",[t._v("nextProps")]),t._v(" ，"),n("code",[t._v("this.state")]),t._v(" 和 "),n("code",[t._v("nextState")]),t._v(" 值是否变化，来确认返回 true 或者 "),n("code",[t._v("false")]),t._v("。当返回 "),n("code",[t._v("false")]),t._v(" 时，组件的更新过程停止，后续的 "),n("code",[t._v("render")]),t._v("、"),n("code",[t._v("componentDidUpdate")]),t._v(" 也不会被调用。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("注意：")]),this._v(" 添加 "),e("code",[this._v("shouldComponentUpdate")]),this._v(" 方法时，不建议使用深度相等检查（如使用 "),e("code",[this._v("JSON.stringify()")]),this._v("），因为深比较效率很低，可能会比重新渲染组件效率还低。而且该方法维护比较困难，建议使用该方法会产生明显的性能提升时使用。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[this._v("getSnapshotBeforeUpdate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v("(")]),this._v("prevProps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v(",")]),this._v(" prevState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v(")")]),this._v("\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("这个方法在 "),n("code",[t._v("render")]),t._v(" 之后，"),n("code",[t._v("componentDidUpdate")]),t._v(" 之前调用，有两个参数 "),n("code",[t._v("prevProps")]),t._v(" 和 "),n("code",[t._v("prevState")]),t._v("，表示更新之前的 "),n("code",[t._v("props")]),t._v(" 和 "),n("code",[t._v("state")]),t._v("，这个函数必须要和 "),n("code",[t._v("componentDidUpdate")]),t._v(" 一起使用，并且要有一个返回值，默认是 "),n("code",[t._v("null")]),t._v("，这个返回值作为第三个参数传给 "),n("code",[t._v("componentDidUpdate")]),t._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("当组件更新后，对 DOM 进行操作；")]),e("li",[this._v("如果你对更新前后的 props 进行了比较，也可以选择在此处进行网络请求；（例如，当 props 未发生变化时，则不会执行网络请求）。")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentDidUpdate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prevProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prevState"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" snapshot")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("prevProps: 更新前的props")]),e("li",[this._v("prevState: 更新前的state")]),e("li",[this._v("snapshot: getSnapshotBeforeUpdate()生命周期的返回值")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("清除 timer，取消网络请求或清除")]),e("li",[this._v("取消在 componentDidMount() 中创建的订阅等；")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这个生命周期在一个组件被卸载和销毁之前被调用，因此你不应该再这个方法中使用 "),e("code",[this._v("setState")]),this._v("，因为组件一旦被卸载，就不会再装载，也就不会重新渲染。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("error：抛出的错误。")]),e("li",[this._v("info：带有 componentStack key 的对象，其中包含有关组件引发错误的栈信息")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("React常见的生命周期如下： "),e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac5371efce0b4adca97e2573e1e18282~tplv-k3u1fbpfcp-zoom-1.image",alt:"在这里插入图片描述"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("React常见生命周期的过程大致如下：")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[t._v("挂载阶段，首先执行constructor构造方法，来创建组件")]),n("li",[t._v("创建完成之后，就会执行render方法，该方法会返回需要渲染的内容")]),n("li",[t._v("随后，React会将需要渲染的内容挂载到DOM树上")]),n("li",[n("strong",[t._v("挂载完成之后就会执行componentDidMount生命周期函数")])]),n("li",[t._v("如果我们给组件创建一个props（用于组件通信）、调用setState（更改state中的数据）、调用forceUpdate（强制更新组件）时，都会重新调用render函数")]),n("li",[t._v("render函数重新执行之后，就会重新进行DOM树的挂载")]),n("li",[n("strong",[t._v("挂载完成之后就会执行componentDidUpdate生命周期函数")])]),n("li",[n("strong",[t._v("当移除组件时，就会执行componentWillUnmount生命周期函数")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("1) componentWillMount")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("2) componentWillReceiveProps")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("getDSFP是静态方法，在这里不能使用this，也就是一个纯函数，开发者不能写出副作用的代码")]),e("li",[this._v("开发者只能通过prevState而不是prevProps来做对比，保证了state和props之间的简单关系以及不需要处理第一次渲染时prevProps为空的情况")]),e("li",[this._v("基于第一点，将状态变化（setState）和昂贵操作（tabChange）区分开，更加便于 render 和 commit 阶段操作或者说优化。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("3) componentWillUpdate")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("4) getSnapshotBeforeUpdate(prevProps, prevState)")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ScrollingList")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("React"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Component")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("listRef "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" React"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createRef")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSnapshotBeforeUpdate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prevProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prevState")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 我们是否在 list 中添加新的 items ？")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 捕获滚动位置以便我们稍后调整滚动位置。")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" list "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("listRef"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scrollHeight "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scrollTop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentDidUpdate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prevProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prevState"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" snapshot")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果我们 snapshot 有值，说明我们刚刚添加了新的 items，")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调整滚动位置使得这些新 items 不会将旧的 items 推出视图。")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//（这里的 snapshot 是 getSnapshotBeforeUpdate 的返回值）")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("snapshot "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" list "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("listRef"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scrollTop "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scrollHeight "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" snapshot"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div ref"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("listRef"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ...contents... */")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[e("p",[e("strong",[this._v("父传子")])]),e("p",[this._v("React数据流动是单向的;父组件通过props向子组件传递需要的信息")])]),e("li",[e("p",[e("strong",[this._v("子传父")])]),e("ul",[e("li",[this._v("利用回调函数")]),e("li",[this._v("利用自定义事件机制")])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("// 一般改变state值的一种方式\nconst { data } = this.state;\nthis.setState({ data: {...data, key: 1 } });\n// 另外一种可以通过callback的方式改变state的值\nthis.setState(({ data }) => ({ data: {...data, key: 1 } }));\n// 还可以\nthis.setState((state, props) => {\nreturn { counter: state.counter + props.step };\n});\n")])])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('run(){\n\talert("第一种方法！")\n}\n\n<button onClick={this.run.bind(this)}>第一种</button>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('constructor(props) {\n    super(props);\n    this.state={\n    //定义数据\n    }\n    this.run = this.run.bind(this);\n}\n\nrun(){\n\talert("第二种方法！")\n}\n\n<button onClick={this.run}>第二种</button>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('run=()=> {\n\talert("第三种方法！")\n}\n\n<button onClick={this.run}>第三种</button>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('run(){\n\talert("第四种方法！")\n}\n\n<button onClick={()=>this.run()>第四种</button>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("const Children = (props: Iprops, ref: React.Ref<unknown>) => {\n  useImperativeHandle(ref, () => ({   // 父组件调用 子组件方法，需要 useImperativeHandle 里面定义\n    childFn: childFn,\n\t}));\n\tconst childFn = ()=>{ }\n  return (\n    <div>child</div>\n  );\n};\n\nexport default forwardRef(Children); // 函数组件使用ref，需要forwardRef包裹\n\nconst Parent = () => {\n  const childrenRef: React.MutableRefObject<any> = useRef();\n  const handleSubmit = () => {\n    childrenRef?.current?.childFn();\n  };\n  return (\n    <Children ref={childrenRef} />\n  );\n};\n\nexport default Parent;\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("  const CreateOrderParent = (props) => {\n  \tuseImperativeHandle(props.refInstance, () => ({\n      handleSubmit: submit,\n    }));\n    const submit = () => {\n      const values = formRef?.current?.submit();\n      if (values) {\n        return values;\n      } else {\n        return false;\n      }\n    };\n  }\n  \n  const ConnentCreateOrderParent = connect(({ usersandparent, user }) => {\n    return {\n      user: user.currentUser,\n    };\n  })(CreateOrderParent);\n  export default forwardRef((props, ref) => (\n    <ConnentCreateOrderParent {...props} refInstance={ref} />\n  ));\n\n  \n  const parentRefs = [];\n  const setParentRef = (ref) => {\n    parentRefs.push(ref);\n  };\n   \n   {parentList.map((item, index) => {\n   \t\treturn <CreateOrderParent ref={setParentRef} />;\n   })}\n")])])])}],!1,null,null,null);e.default=a.exports}}]);