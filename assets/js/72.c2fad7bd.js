(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{328:function(e,t,n){"use strict";n.r(t);var s=n(0),i=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"js-概念"}},[e._v("JS 概念")]),n("h2",{attrs:{id:"bfc规范"}},[e._v("BFC规范")]),n("p",[e._v("级格式化上下文，是CSS中的一个渲染机制，BFC就相当于一个盒子，内部的元素与外界的元素互不干扰。它不会影响外部的布局，外部的布局也不会影响到它.")]),e._m(0),n("p",[e._v("1.float的值不是none")]),n("p",[e._v("2.position 的值不是static或者relative")]),n("p",[e._v("3.display的值是inline-block,table-cell,flex,table-caption或者inline-flex")]),n("p",[e._v("4.overflow的值不是visible")]),e._m(1),n("p",[e._v("1.内部的BOX会在垂直方向上一个接一个的放置")]),n("p",[e._v("2.于同一个BFC的俩个相邻的BOX的margin会发生重叠，与方向无关。")]),n("p",[e._v("3.每个元素的左外边距与包含块的左边界相接触（从左到右），即使浮动元素也是如此")]),n("p",[e._v("4.BFC的区域不会与float的元素区域重叠")]),n("p",[e._v("5.计算BFC的高度时，浮动子元素也参与计算")]),n("p",[e._v("6.BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然")]),e._m(2),n("p",[e._v("要阻止margin重叠，只要将俩个元素别放在一个BFC中即可 使得父元素包含子元素，常见的方式是为父元素设置overflow：hidden或者浮动父元素。根本原因在于创建BFC的元素，子浮动元素也会参与其高度计算，即不会产生高度塌陷问题 与浮动元素相邻的已生成BFC的元素不能与浮动元素互相覆盖。利用该特性可以作为多栏布局的一种实现方式. 特点在于左右俩栏的宽度固定，中间栏可以根据浏览器宽度自适应")]),n("h2",{attrs:{id:"js-自定义事件实现"}},[e._v("js 自定义事件实现")]),e._m(3),n("h2",{attrs:{id:"事件委托，目的，功能，写法"}},[e._v("事件委托，目的，功能，写法")]),e._m(4),n("h2",{attrs:{id:"同源策略"}},[e._v("同源策略")]),n("p",[e._v("源（origin）就是协议、域名和端口号。")]),n("p",[e._v("同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。所以a.com下的js脚本采用ajax读取b.com里面的文件数据是会报错的。")]),n("p",[e._v("这个策略可以阻止一个页面上的恶意脚本通过页面的DOM对象获得访问另一个页面上敏感信息的权限。")]),n("h3",{attrs:{id:"跨域"}},[e._v("跨域")]),n("p",[e._v("浏览器同源策略的影响，不是同源的脚本不能操作其他源下面的对象。想要操作另一个源下的对象是就需要跨域。")]),e._m(5),e._m(6),e._m(7),e._m(8),e._m(9),e._m(10),n("p",[e._v("一个页面上的脚本仍然不能直接访问另外一个页面上的方法或者变量，但是他们可以安全的通过消息传递技术交流。")]),e._m(11),n("h2",{attrs:{id:"ajax-原理"}},[e._v("Ajax 原理")]),n("p",[e._v("Ajax的全称是Asynchronous JavaScript and XML，即异步JavaScript+XML。  是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。")]),n("p",[e._v("由以下几种技术组成：")]),e._m(12),e._m(13),e._m(14),e._m(15),e._m(16),e._m(17),e._m(18),e._m(19),n("p",[e._v("每当 readyState 改变时，就会触发 onreadystatechange 事件。")]),e._m(20),n("h3",{attrs:{id:"get和post"}},[e._v("get和post")]),e._m(21),n("h3",{attrs:{id:"cookie自动登录"}},[e._v("cookie自动登录")]),e._m(22),n("h2",{attrs:{id:"cookie"}},[e._v("Cookie")]),e._m(23),n("h2",{attrs:{id:"浏览器本地存储"}},[e._v("浏览器本地存储")]),e._m(24),n("h3",{attrs:{id:"web-storage-与-cookie"}},[e._v("web storage 与 cookie")]),e._m(25),e._m(26),n("p",[e._v("1.cookie的大小是受限的，cookie大小4KB，storage大小5M。")]),n("p",[e._v("2.每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，storage不会发送信息去服务器。")]),n("p",[e._v("3.cookie还需要指定作用域，不可以跨域调用 cookie需要前端开发者自己封装setCookie，getCookie。")]),n("p",[e._v("4.cookie在过期时间内有效；sessionStorage在当前浏览器窗口关闭自动删除，会话级别；loaclStoage永久有效，除非主动删除。")]),n("h2",{attrs:{id:"session"}},[e._v("session")]),n("p",[e._v("Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。")]),n("p",[e._v("当浏览器 第一次发送请求时，服务器自动生成了一个Session和一个Session ID用来唯一标识这个Session，并将其通过响应发送到浏览器。当浏览器第二次发送请求，会将前一次服务器响应中的Session ID放在请求中一并发送到服务器上，服务器从请求中提取出Session ID，并和保存的所有Session ID进行对比，找到这个用户对应的Session。")]),n("p",[e._v("用户首次与Web服务器建立连接的时候，服务器会给用户分发一个 SessionID作为标识。SessionID是一个由24个字符组成的随机字符串。用户每次提交页面，浏览器都会把这个SessionID包含在 HTTP头中提交给Web服务器，这样Web服务器就能区分当前请求页面的是哪一个客户端。这个SessionID就是保存在客户端的，属于客户端Session。其实客户端Session默认是以cookie的形式来存储的。")]),n("p",[e._v("当然我们客户端可以禁用cookie,这时候服务器端就拿不到sessionID。")]),n("h2",{attrs:{id:"token"}},[e._v("Token")]),n("p",[e._v("Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：")]),e._m(27),n("h2",{attrs:{id:"线程，进程"}},[e._v("线程，进程")]),e._m(28),n("h2",{attrs:{id:"负载均衡"}},[e._v("负载均衡")]),e._m(29),n("h2",{attrs:{id:"cdn缓存"}},[e._v("CDN缓存")]),n("ol",[n("li",[e._v("CDN 是一种部署策略，根据不同的地区部署类似nginx 这种服务服务，会缓存静态资源。前端在项目优化的时候，习惯在讲台资源上加上一个 hash 值，每次更新的时候去改变这个 hash，hash 值变化的时候，服务会去重新取资源")]),n("li",[e._v("(CDN)是一个经策略性部署的整体系统，包括分布式存储、负载均衡、网络请求的重定向和内容管理4个要件")]),n("li",[e._v("CDN的全称是Content Delivery Network，即"),n("a",{attrs:{href:"https://baike.baidu.com/item/%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9C/4034265",target:"_blank",rel:"noopener noreferrer"}},[e._v("内容分发网络"),n("OutboundLink")],1),e._v("。其基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置"),n("a",{attrs:{href:"https://baike.baidu.com/item/%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E5%99%A8/4576219",target:"_blank",rel:"noopener noreferrer"}},[e._v("节点服务器"),n("OutboundLink")],1),e._v("所构成的在现有的互联网基础之上的一层智能"),n("a",{attrs:{href:"https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C/855117",target:"_blank",rel:"noopener noreferrer"}},[e._v("虚拟网络"),n("OutboundLink")],1),e._v("，CDN系统能够实时地根据"),n("a",{attrs:{href:"https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F/7489548",target:"_blank",rel:"noopener noreferrer"}},[e._v("网络流量"),n("OutboundLink")],1),e._v("和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。")])]),n("h2",{attrs:{id:"url到页面加载显示完成"}},[e._v("URL到页面加载显示完成")]),e._m(30),n("h2",{attrs:{id:"seo优化技巧"}},[e._v("SEO优化技巧")]),n("p",[e._v("前端开发工程师不仅需要要跟视觉设计师、交互式设计师配合，完美还原设计图稿，编写兼容各大浏览器、加载速度快、用户体验好的页面。现在还需要跟SEO人员配合，调整页面的代码结构和标签。")]),e._m(31),n("h2",{attrs:{id:"垃圾回收机制方式及内存管理"}},[e._v("垃圾回收机制方式及内存管理")]),e._m(32),n("h2",{attrs:{id:"前端模块化"}},[e._v("前端模块化")]),n("h3",{attrs:{id:"_1-什么是模块"}},[e._v("1.什么是模块?")]),e._m(33),n("h3",{attrs:{id:"_2-模块化的进化过程"}},[e._v("2.模块化的进化过程")]),e._m(34),e._m(35),e._m(36),e._m(37),n("p",[e._v("这样的写法会暴露所有模块成员，内部状态可以被外部改写。")]),e._m(38),e._m(39),e._m(40),n("p",[e._v("这就是现代模块实现的基石")]),e._m(41),e._m(42),n("h3",{attrs:{id:"_3-模块化的好处"}},[e._v("3. 模块化的好处")]),e._m(43),e._m(44),e._m(45),n("p",[e._v("首先我们要依赖多个模块，那样就会发送多个请求，导致请求过多")]),e._m(46),n("p",[e._v("我们不知道他们的具体依赖关系是什么，也就是说很容易因为不了解他们之间的依赖关系导致加载先后顺序出错。")]),e._m(47),n("p",[e._v("以上两种原因就导致了很难维护，很可能出现牵一发而动全身的情况导致项目出现严重的问题。\n模块化固然有多个好处，然而一个页面需要引入多个js文件，就会出现以上这些问题。而这些问题可以通过模块化规范来解决，下面介绍开发中最流行的commonjs, AMD, ES6, CMD规范。")]),n("h2",{attrs:{id:"模块化规范"}},[e._v("模块化规范")]),n("h3",{attrs:{id:"_1-commonjs"}},[e._v("1.CommonJS")]),n("h4",{attrs:{id:"_1-概述"}},[e._v("(1)概述")]),e._m(48),n("h4",{attrs:{id:"_2-特点"}},[e._v("(2)特点")]),e._m(49),n("h4",{attrs:{id:"_3-基本语法"}},[e._v("(3)基本语法")]),e._m(50),e._m(51),e._m(52),n("p",[e._v("上面代码通过module.exports输出变量x和函数addX。")]),e._m(53),e._m(54),n("h4",{attrs:{id:"_4-模块的加载机制"}},[e._v("(4)模块的加载机制")]),e._m(55),e._m(56),n("p",[e._v("上面代码输出内部变量counter和改写这个变量的内部方法incCounter。")]),e._m(57),e._m(58),n("h4",{attrs:{id:"_5-服务器端实现"}},[e._v("(5)服务器端实现")]),n("h4",{attrs:{id:"①下载安装node-js"}},[e._v("①下载安装node.js")]),n("h4",{attrs:{id:"②创建项目结构"}},[e._v("②创建项目结构")]),e._m(59),e._m(60),n("h4",{attrs:{id:"③下载第三方模块"}},[e._v("③下载第三方模块")]),e._m(61),n("h4",{attrs:{id:"④定义模块代码"}},[e._v("④定义模块代码")]),e._m(62),n("h4",{attrs:{id:"⑤通过node运行app-js"}},[e._v("⑤通过node运行app.js")]),e._m(63),n("h4",{attrs:{id:"_6-浏览器端实现-借助browserify"}},[e._v("(6)浏览器端实现(借助Browserify)")]),n("h4",{attrs:{id:"①创建项目结构"}},[e._v("①创建项目结构")]),e._m(64),n("h4",{attrs:{id:"②下载browserify"}},[e._v("②下载browserify")]),e._m(65),n("h4",{attrs:{id:"③定义模块代码-同服务器端"}},[e._v("③定义模块代码(同服务器端)")]),e._m(66),n("h4",{attrs:{id:"④打包处理js"}},[e._v("④打包处理js")]),e._m(67),n("h4",{attrs:{id:"⑤页面使用引入"}},[e._v("⑤页面使用引入")]),e._m(68),n("h3",{attrs:{id:"_2-amd"}},[e._v("2.AMD")]),e._m(69),n("h4",{attrs:{id:"_1-amd规范基本语法"}},[e._v("(1)AMD规范基本语法")]),e._m(70),e._m(71),e._m(72),e._m(73),n("h4",{attrs:{id:"_2-未使用amd规范与使用require-js"}},[e._v("(2)未使用AMD规范与使用require.js")]),n("p",[e._v("通过比较两者的实现方法，来说明使用AMD规范的好处。")]),e._m(74),e._m(75),e._m(76),e._m(77),e._m(78),n("h4",{attrs:{id:"①下载require-js-并引入"}},[e._v("①下载require.js, 并引入")]),e._m(79),n("p",[e._v("然后将require.js导入项目: js/libs/require.js")]),n("h4",{attrs:{id:"②创建项目结构-2"}},[e._v("②创建项目结构")]),e._m(80),n("h4",{attrs:{id:"③定义require-js的模块代码"}},[e._v("③定义require.js的模块代码")]),e._m(81),n("h4",{attrs:{id:"④页面引入require-js模块"}},[e._v("④页面引入require.js模块:")]),e._m(82),n("p",[e._v("**此外在项目中如何引入第三方库？**只需在上面代码的基础稍作修改：")]),e._m(83),e._m(84),n("h3",{attrs:{id:"_3-cmd"}},[e._v("3.CMD")]),n("p",[e._v("CMD规范专门用于浏览器端，模块的加载是异步的，模块使用时才会加载执行。CMD规范整合了CommonJS和AMD规范的特点。在 Sea.js 中，所有 JavaScript 模块都遵循 CMD模块定义规范。")]),n("h4",{attrs:{id:"_1-cmd规范基本语法"}},[e._v("(1)CMD规范基本语法")]),e._m(85),e._m(86),e._m(87),e._m(88),n("h4",{attrs:{id:"_2-sea-js简单使用教程"}},[e._v("(2)sea.js简单使用教程")]),n("h4",{attrs:{id:"①下载sea-js-并引入"}},[e._v("①下载sea.js, 并引入")]),e._m(89),n("p",[e._v("然后将sea.js导入项目: js/libs/sea.js")]),n("h4",{attrs:{id:"②创建项目结构-3"}},[e._v("②创建项目结构")]),e._m(90),n("h4",{attrs:{id:"③定义sea-js的模块代码"}},[e._v("③定义sea.js的模块代码")]),e._m(91),n("h4",{attrs:{id:"④在index-html中引入"}},[e._v("④在index.html中引入")]),e._m(92),n("h3",{attrs:{id:"_4-es6模块化"}},[e._v("4.ES6模块化")]),n("p",[e._v("ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。")]),n("h4",{attrs:{id:"_1-es6模块化语法"}},[e._v("(1)ES6模块化语法")]),n("p",[e._v("export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。")]),e._m(93),n("p",[e._v("如上例所示，使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到export default命令，为模块指定默认输出。")]),e._m(94),n("p",[e._v("模块默认输出, 其他模块加载该模块时，import命令可以为该匿名函数指定任意名字。")]),n("h4",{attrs:{id:"_2-es6-模块与-commonjs-模块的差异"}},[e._v("(2)ES6 模块与 CommonJS 模块的差异")]),n("p",[e._v("它们有两个重大差异：")]),e._m(95),e._m(96),n("p",[e._v("第二个差异是因为 CommonJS 加载的是一个对象（即module.exports属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。")]),n("p",[e._v("下面重点解释第一个差异，我们还是举上面那个CommonJS模块的加载机制例子:")]),e._m(97),e._m(98),n("h4",{attrs:{id:"_3-es6-babel-browserify使用教程"}},[e._v("(3) ES6-Babel-Browserify使用教程")]),e._m(99),n("h4",{attrs:{id:"①定义package-json文件"}},[e._v("①定义package.json文件")]),e._m(100),n("h4",{attrs:{id:"②安装babel-cli-babel-preset-es2015和browserify"}},[e._v("②安装babel-cli, babel-preset-es2015和browserify")]),e._m(101),n("h4",{attrs:{id:"③定义-babelrc文件"}},[e._v("③定义.babelrc文件")]),e._m(102),n("h4",{attrs:{id:"④定义模块代码-2"}},[e._v("④定义模块代码")]),e._m(103),n("h4",{attrs:{id:"⑤-编译并在index-html中引入"}},[e._v("⑤ 编译并在index.html中引入")]),e._m(104),n("p",[e._v("然后在index.html文件中引入")]),e._m(105),e._m(106),e._m(107),n("h3",{attrs:{id:"模块化总结"}},[e._v("模块化总结")]),e._m(108)])}),[function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("strong",[this._v("创建BFC")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("strong",[this._v("BFC特性")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("strong",[this._v("BFC布局中应用")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",[t("li",[this._v("原生提供了3个方法实现自定义事件")]),t("li",[this._v("createEvent，设置事件类型，是 html 事件还是 鼠标事件")]),t("li",[this._v("initEvent 初始化事件，事件名称，是否允许冒泡，是否阻止自定义事件")]),t("li",[this._v("dispatchEvent 触发事件")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("p",[this._v("把一个或者一组元素的事件委托到它的父层或者更外层元素上")])]),t("li",[t("p",[this._v("优点，减少内存消耗，动态绑定事件")])]),t("li",[t("p",[this._v("target 是触发事件的最具体的元素，currenttarget是绑定事件的元素(在函数中一般等于this)")])]),t("li",[t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("window.onload = function(){\n　　var oUl = document.getElementById(\"ul1\");\n　　oUl.onclick = function(ev){\n　　　　var ev = ev || window.event;\n　　　　var target = ev.target || ev.srcElement;\n　　　　if(target.nodeName.toLowerCase() == 'li'){\n　 　　　　　　 alert(123);\n　　　　　　　  alert(target.innerHTML);\n　　　　}\n　　}\n}\n")])])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("cors-跨域资源共享（Cross-origin resource sharing）")]),this._v(" ---\x3e这种方式使用了一个新的"),t("code",[this._v("Origin")]),this._v("请求头和一个新的"),t("code",[this._v("Access-Control-Allow-Origin")]),this._v("响应头扩展了HTTP。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("允许服务端设置"),t("code",[this._v("Access-Control-Allow-Origin")]),this._v("头标识哪些站点可以请求文件，或者设置"),t("code",[this._v("Access-Control-Allow-Origin")]),this._v('头为"*"， （IE8---IE9---jquery.xdomainrequest.min.js）')])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("JSONP")]),this._v("---\x3eJOSNP允许页面接受另一个域的JSON数据，通过在页面增加一个可以从其它域加载带有回调的JSON响应的"),t("code",[this._v("<script>")]),this._v("标签。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",[t("li",[t("p",[this._v("使用这种方法，只要是个网站都可以拿到b.com里的数据，存在安全性问题。需要网站双方商议基础token的身份验证，这里不详述。")]),t("p",[this._v(". 只能是GET，不能POST。 . 可能被注入恶意代码，篡改页面内容，可以采用字符串过滤来规避此问题。")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("postMessage() -跨文档通信")]),this._v("---\x3e这种方式允许一个页面的脚本发送文本信息到另一个页面的脚本中，不管脚本是否跨域。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在一个window对象上调用"),t("code",[this._v("postMessage()")]),this._v("会异步的触发window上的"),t("code",[this._v("onmessage")]),this._v("事件，然后触发定义好的事件处理方法。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("window.name")]),this._v("---\x3ewindow对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的，并不会因新页面的载入而进行重置。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("HTML/XHTML——主要的内容表示语言。")]),t("li",[this._v("CSS——为XHTML提供文本格式定义。")]),t("li",[this._v("DOM——对已载入的页面进行动态更新。")]),t("li",[this._v("XML——数据交换格式。")]),t("li",[this._v("XSLT——将XML转换为XHTML（用CSS修饰样式）。")]),t("li",[this._v("XMLHttp——用XMLHttpRequest来和服务器进行异步通信，是主要的通信代理。")]),t("li",[this._v("JavaScript——用来编写Ajax引擎的脚本语言。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("XMLHttpRequest对象")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("当需要异步与服务器交换数据时，需要XMLHttpRequest对象来异步交换。 XMLHttpRequest对象的主要"),t("strong",[this._v("属性")]),this._v("有：")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[e._v("onreadystatechange——每次状态改变所触发事件的事件处理程序。")]),n("li",[e._v("responseText——从服务器进程返回数据的字符串形式。")]),n("li",[e._v("responseXML——从服务器进程返回的DOM兼容的文档数据对象。")]),n("li",[e._v("status——从服务器返回的数字代码，如404（未找到）和200（已就绪）。")]),n("li",[e._v("status Text——伴随状态码的字符串信息。")]),n("li",[e._v("readyState——对象状态值。对象状态值有以下几个：\n"),n("ul",[n("li",[e._v("0 - (未初始化)还没有调用send()方法")]),n("li",[e._v("1 - (载入)已调用send()方法，正在发送请求")]),n("li",[e._v("2 - (载入完成)send()方法执行完成")]),n("li",[e._v("3 - (交互)正在解析响应内容")]),n("li",[e._v("4 - (完成)响应内容解析完成，可以在客户端调用了")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("XMLHttpRequest对象有两个重要"),t("strong",[this._v("方法")]),this._v(" open与send。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("创建过程")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("p",[e._v("创建XMLHttpRequest对象")]),n("ul",[n("li",[n("div",{staticClass:"language-text extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  var xmlhttp = new XMLHttpRequest();                    //IE7及以上\n  var xmlhttp = new ActiveXObject('Microsoft.XMLHTTP'); //IE5 和 IE6\n")])])])])])]),n("li",[n("p",[e._v("打开链接")]),n("ul",[n("li",[n("div",{staticClass:"language-text extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("xmlhttp.open( method, url, async );  \n")])])])]),n("li",[n("div",{staticClass:"language-text extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("method：请求的类型，GET 或 POST\nurl：文件在服务器上的位置\nasync：true（异步）或 false（同步）\n同步：指发出数据后，等接收到响应以后再发送下一个数据包的通讯方式。\n异步：指发出数据后，不用等待接收到响应，接着发送下一个数据包的通讯方式。\n")])])])])])]),n("li",[n("p",[e._v("发送请求")]),n("ul",[n("li",[n("div",{staticClass:"language-text extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("xmlhttp.send(string);\n")])])]),n("ul",[n("li",[n("div",{staticClass:"language-text extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("xmlhttp.send();    //GET方式\n")])])])]),n("li",[n("div",{staticClass:"language-text extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");    //向请求添加HTTP头\nxmlhttp.send("fname=Bill&lname=Gates");   //POST方式\n')])])])])])]),n("li",[n("p",[n("strong",[e._v("GET 还是 POST？")])]),n("p",[e._v("与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。 然而，在以下情况中，请使用 POST 请求：  a. 无法使用缓存文件（更新服务器上的文件或数据库）；  b. 向服务器发送大量数据（POST 没有数据量限制）；  c. 发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠。")])])])]),n("li",[n("p",[e._v("接收服务器相应")]),n("ul",[n("li",[n("p",[n("strong",[e._v("Onreadystatechange")]),e._v(" ---存储函数（或函数名），每当readyState 属性改变时，就会调用该函数。")])]),n("li",[n("p",[e._v("readyState")]),n("p",[e._v("---存有XMLHttpRequest 的状态信息，从 0 到 4 发生变化。")]),n("ul",[n("li",[e._v("0: 请求未初始化")]),n("li",[e._v("1: 服务器连接已建立")]),n("li",[e._v("2: 请求已接收")]),n("li",[e._v("3: 请求处理中")]),n("li",[e._v("4: 请求已完成，且响应已就绪")])])]),n("li",[n("p",[e._v("Status（HTTP状态码）")]),n("ul",[n("li",[e._v("1字头：消息。这一类型的状态码，代表请求已被接受，需要继续处理。")]),n("li",[e._v("2字头：成功。这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。( 200:'OK' )")]),n("li",[e._v("3字头：重定向。这类状态码代表需要客户端采取进一步的操作才能完成请求。( 304:'Not Modified' )")]),n("li",[e._v("4字头：请求错误。这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。")]),n("li",[e._v("5、6字头：服务器错误。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生。")])])])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("//GET 方式：\n  function ajax(url,success,error){\n      if(window.XMLHttpRequest){\n          var oAjax = new XMLHttpRequest();\n      }else{\n          var oAjax = new ActiveXObject('Microsoft.XMLHTTP');\n      }\n      oAjax.open('GET',url,true);\n      oAjax.send();\n      oAjax.onreadystatechange = function(){\n          if(oAjax.readyState==4){\n              if(oAjax.status>=200&&oAjax.status<300||oAjax.status==304){\n                  success&&success(oAjax.responseText);    //成功的回调函数\n              }else{\n                  error&&error(oAjax.status);              //失败的回调函\n              }\n          }\n      };\n  }\n//POST 方式：\n  function ajax(url,success,error){\n      if(window.XMLHttpRequest){\n          var oAjax = new XMLHttpRequest();\n      }else{\n          var oAjax = new ActiveXObject('Microsoft.XMLHTTP');\n      }\n      oAjax.open('POST ',url,true);\n      oAjax.setRequestHeader('Content-Type','application/x-www-form-urlencoded');\n      oAjax.send('fname=Bill&lname=Gates');\n      oAjax.onreadystatechange = function(){\n          if(oAjax.readyState==4){\n              if(oAjax.status>=200&&oAjax.status<300||oAjax.status==304){\n                  success&&success(oAjax.responseText);    //成功的回调函数\n              }else{\n                  error&&error(oAjax.status);              //失败的回调函\n              }\n          }\n      };\n  }\n$.ajax({\n    type: \"get\",\n    url: \"http://www.github.com/alex\",\n    data: {\n    \tid : \"1\",\n    \tname : \"alex\",\n    },\n    dataType: \"json\",\n    beforeSend: function(XMLHttpRequest) {\n        //ShowLoading();\n    },\n    success: function(data, textStatus) {\n        //请求成功处理\n    },\n    complete: function(XMLHttpRequest, textStatus) {\n        //HideLoading();\n    },\n    error: function() {\n        //请求出错处理\n    }\n});\n")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[e._v("GET从指定的资源请求数据，POST 向指定的资源提交要被处理的数据")]),n("li",[e._v("GET在浏览器回退时是无害的，而POST会再次提交请求。")]),n("li",[e._v("GET产生的URL地址可以被Bookmark，而POST不可以。")]),n("li",[e._v("GET请求会被浏览器主动cache，而POST不会，除非手动设置。")]),n("li",[e._v("GET请求只能进行url编码，而POST支持多种编码方式。")]),n("li",[e._v("GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。")]),n("li",[e._v("GET请求在URL中传送的参数是有长度限制的，而POST么有。")]),n("li",[e._v("对参数的数据类型，GET只接受ASCII字符，而POST没有限制。")]),n("li",[e._v("GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息")]),n("li",[e._v("GET参数通过URL传递，POST放在Request body中。")]),n("li",[e._v("GET产生一个TCP数据包，浏览器会把http header和data一并发送出去，服务器响应200(返回数据); POST产生两个TCP数据包，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok(返回数据)。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('//记住用户名密码----是否自动登录\nfunction Save() {\n    if ($("#rememberMe").prop("checked")) {\n        var str_username = $("#NameText").val();//用户名\n        var str_password = $("#inputPassword").val();//密码\n        $.cookie("rmbUser", "true", { expires: 7 }); //存储一个带7天期限的cookie\n        $.cookie("username", str_username, { expires: 7 });\n        $.cookie("password", str_password, { expires: 7 });\n    }else {\n        $.cookie("rmbUser", "false", { expire: -1 });\n        $.cookie("username", "", { expires: -1 });\n        $.cookie("password", "", { expires: -1 });\n    }\n\n    if ($("#autoLogin").prop("checked")) {\n        var str_username = $("#NameText").val();\n        var str_password = $("#inputPassword").val();\n        $.cookie("auto", "true", { expires: 7 }); //存储一个带7天期限的cookie\n        $.cookie("username", str_username, { expires: 7 });\n        $.cookie("password", str_password, { expires: 7 });\n    }else {\n        $.cookie("auto", "false", { expire: -1 });\n        $.cookie("username", "", { expires: -1 });\n        $.cookie("password", "", { expires: -1 });\n    }\n}\n$("#autoLogin").change(function() {\n    if($("#autoLogin").prop("checked")){\n    \t$.cookie("auto", "true", { expires: 7 });\n    }else{\n    \t$.cookie("auto", "false", { expires: 7 });\n    }\n});\n\nif ($.cookie("rmbUser") == "true") {\n    $("#rememberMe").attr("checked", true);\n    $("#NameText").val($.cookie("username"));\n    $("#inputPassword").val($.cookie("password"));\n}\n\nif ($.cookie("auto") == "true") {\n    setTimeout(function(){\n    \tif($.cookie("auto") == "true") \n    \twindow.location.href=\'下一个界面\';\n    },5000);\n}\n')])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[e._v("特点\n"),n("ul",[n("li",[e._v("每个特定的域名下最多生成20个cookie\n"),n("ul",[n("li",[e._v("1.IE6及跟早版本最多20个cookie")]),n("li",[e._v("2.IE7和之后版本最多50个cookie")]),n("li",[e._v("3.firefox最多50个cookie")]),n("li",[e._v("4.chrome和safire没有硬性限制")])])]),n("li",[e._v("cookie大小大约4096字节，一般不超过4095个字节。")])])]),n("li",[e._v("优点\n"),n("ul",[n("li",[e._v("极高的扩张性和可用性\n"),n("ul",[n("li",[e._v("1.通过良好的编程，控制保存在cookie中的session对象的大小。")]),n("li",[e._v("2.通过加密和安全传输技术（SSL），减少cookie被破解的可能性。")]),n("li",[e._v("3.只在cookie中存放不敏感数据，即使被盗也不会有重大损失。")]),n("li",[e._v("4.控制cookie的生命期，使之不会永远有效。偷盗者很可能拿到一个过期的cookie。")])])])])]),n("li",[e._v("缺点\n"),n("ul",[n("li",[e._v("1\n"),n("ul",[n("li",[e._v("1.cookie数量和长度的限制。每个domain最多只能有20条cookie，每个cookie长度不能超过4KB，否则会被截掉。")]),n("li",[e._v("2.安全性问题。如果cookie被人拦截了，那人就可以取得所有的session信息。即使加密也与事无补，因为拦截者并不需要知道cookie的意义，他只要原样转发cookie就可以达到目的了。")]),n("li",[e._v("3.有些状态不可能保存在客户端。例如，为了防止重复提交表单，我们需要在服务器端保存一个计数器。如果我们把这个计数器保存在客户端，那么它起不到任何作用。")])])])])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("p",[n("strong",[e._v("localStotrage")])]),n("p",[e._v("用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的")]),n("ul",[n("li",[e._v("优点\n"),n("ul",[n("li",[e._v("1.localStorage拓展了cookie的4K限制；")]),n("li",[e._v("2.localStorage会可以将第一次请求的数据直接存储到本地，这个相当于一个5M大小的针对于前端页面的数据库，相比于cookie可以节约带宽，但是这个却是只有在高版本的浏览器中才支持的；")]),n("li",[e._v("3.localStorage 方法存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。")])])]),n("li",[e._v("缺点\n"),n("ul",[n("li",[e._v("1.浏览器的大小不统一，并且在IE8以上的IE版本才支持localStorage这个属性；")]),n("li",[e._v("2.目前所有的浏览器中都会把localStorage的值类型限定为string类型，这个在对我们日常比较常见的JSON对象类型需要一些转换；")]),n("li",[e._v("3.localStorage在浏览器的隐私模式下面是不可读取的；")]),n("li",[e._v("4.localStorage本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡；")]),n("li",[e._v("5.localStorage不能被爬虫抓取到。")])])])])]),n("li",[n("p",[n("strong",[e._v("sessionStrage")])]),n("p",[e._v("本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。 因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("相同点")]),this._v(" ： 1.存储在客户端 2.同源策略影响")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("不同点")]),this._v(" ：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",[t("li",[this._v("客户端使用用户名跟密码请求登录")]),t("li",[this._v("服务端收到请求，去验证用户名与密码")]),t("li",[this._v("验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端")]),t("li",[this._v("客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里")]),t("li",[this._v("客户端每次向服务端请求资源的时候需要带着服务端签发的 Token")]),t("li",[this._v("服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[e._v("进程\n"),n("ul",[n("li",[e._v("所存储资源是操作系统由虚拟内存机制来管理和分配的。"),n("strong",[e._v("进程应该是操作系统分配存储资源的最小单元。")])]),n("li",[e._v("一个进程可以有多个线程，但至少有一个线程")]),n("li",[e._v("进程表示一个逻辑控制流，就是一种计算过程，它造成一个假象，好像这个进程一直在独占CPU资源")]),n("li",[e._v("进程拥有一个独立的虚拟内存地址空间，它造成一个假象，好像这个进程一致在独占存储器资源")])])]),n("li",[e._v("线程\n"),n("ul",[n("li",[e._v("线程是最小的执行单元")]),n("li",[e._v("一个线程只能属于一个进程")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",[t("li",[this._v("当系统面临大量用户访问，负载过高的时候，通常会使用增加服务器数量来进行横向扩展，使用集群和负载均衡提高整个系统的处理能力以及网站的整体性能 。")]),t("li",[this._v("服务器集群负载均衡原理？")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[e._v("首先，在浏览器地址栏中输入url")]),n("li",[e._v("浏览器先查看浏览器缓存-系统缓存-路由器缓存，如果缓存中有，会直接在屏幕中显示页面内容。若没有，则跳到第三步操作。\n"),n("ul",[n("li",[e._v("具体过程：")]),n("li",[e._v("浏览器缓存：浏览器会记录DNS一段时间，因此，只是第一个地方解析DNS请求")]),n("li",[e._v("操作系统缓存：如果在浏览器缓存中不包含这个记录，则会使系统调用操作系统，获取操作系统的记录(保存最近的DNS查询缓存)")]),n("li",[e._v("ISP缓存：若上述均失败，继续向ISP搜索")])])]),n("li",[e._v("发送http请求前，需要域名解析(DNS解析)，解析获取相应的IP地址。")]),n("li",[e._v("浏览器向服务器发起tcp连接，与浏览器建立tcp三次握手。")]),n("li",[e._v("握手成功后，浏览器向服务器发送http请求，请求数据包。")]),n("li",[e._v("服务器处理收到的请求，将数据返回至浏览器")]),n("li",[e._v("浏览器收到HTTP响应")]),n("li",[e._v("读取页面内容，浏览器渲染，解析html源码")]),n("li",[e._v("生成Dom树、解析css样式、js交互")]),n("li",[e._v("户端和服务器交互")]),n("li",[e._v("ajax查询")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[e._v("简化代码结构，更利于搜索引擎分析抓取有用内容：页面尽量采用DIV+CSS，当然，表格展现模式用table还是比div方便很多的;所有js、css采用外联方式，图片采用css精灵，减少请求次数。看下下面同样的内容，用div和talbe布局的代码比较，显而易见用div简便的多。")]),n("li",[e._v("重要内容优先加载(第一个链接最好是网站主关键词，不刻意要求)，可以用css来处理，索引一篇文章的长度也是有限制的，一定要把最重要的内容，优先展现给蜘蛛，这方面你可以通过查看一些比较大的网页快照来求证。")]),n("li",[e._v("每个页面只能出现一次H1标签，H2标签可以多次：H1权重很高，普遍认为仅次于title，一般资讯详情页的标题、商品详情页的标题，都放在H1里。")]),n("li",[e._v("图片一定要添加alt属性，title属性可选：蜘蛛不认识图片上的内容，只能通过alt属性来判断，如果是商品列表页，所有商品都加了alt和title的话，容易造成堆砌关键词，所以我一般是只加alt属性。")]),n("li",[e._v("图片大小声明：如果图片大小不做定义的话，页面需要重新渲染，就会影响到加载速度。")]),n("li",[e._v("链接可根据需求添加title属性以及nofllow值;非特殊性链接，链接地址一定要写入herf属性，有些前端开发人员为了省事，直接用div加个click事件当链接，在视觉上和使用上确实是实现了链接效果，但是做过SEO优化的人 员都知道，蜘蛛目前对于js的支持很差，基本无法读取里面的链接地址。所以说用click事件是绝对不允许的，特别是一些重要的导航链接。")]),n("li",[e._v("页面内容尽量不要做成flash、图片、视频，这些东西蜘蛛是抓不到的，就算是必须的，也要生成相应的静态页面。有很多企业站看着很炫，全站flash，老板看着是爽了，做SEO优化的人员就要抓狂了，全站没一个链接。")]),n("li",[e._v("除首页外别的页面最好要加上面包屑型导航，导航结构一定要清晰。")]),n("li",[e._v("做好404页面，一般会加首页链接及错误提示，并测试其返回状态码为404：\n"),n("ul",[n("li",[e._v("1、用户体验友好，可以留住用户，不至于直接关闭页面;")]),n("li",[e._v("2、蜘蛛友好，可以返回抓取其他页面。")])])]),n("li",[e._v("网站结构呈扁平状树型，目录结构不宜过深，每个页面离首页最多点击不超过3次，过深不利于搜索引擎的抓取。")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[e._v("回收机制方式\n"),n("ul",[n("li",[n("strong",[e._v("定义和用法")]),e._v("：垃圾回收机制(GC:Garbage Collection),执行环境负责管理代码执行过程中使用的内存。")]),n("li",[n("strong",[e._v("原理")]),e._v("：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。但是这个过程不是实时的，因为其开销比较大，所以垃圾回收器会按照固定的时间间隔周期性的执行。")])])]),n("li",[e._v("垃圾回收策略：标记清除(较为常用)和引用计数\n"),n("ul",[n("li",[e._v("标记清除\n"),n("ul",[n("li",[e._v("定义和用法\n"),n("ul",[n("li",[e._v('当变量进入环境时，将变量标记"进入环境"，当变量离开环境时，标记为："离开环境"。某一个时刻，垃圾回收器会过滤掉环境中的变量，以及被环境变量引用的变量，剩下的就是被视为准备回收的变量。')]),n("li",[e._v("到目前为止，IE、Firefox、Opera、Chrome、Safari的js实现使用的都是标记清除的垃圾回收策略或类似的策略，只不过垃圾收集的时间间隔互不相同。")])])])])]),n("li",[e._v("引用计数\n"),n("ul",[n("li",[e._v("定义和用法\n"),n("ul",[n("li",[e._v("引用计数是跟踪记录每个值被引用的次数。")])])]),n("li",[e._v("基本原理\n"),n("ul",[n("li",[e._v("就是变量的引用次数，被引用一次则加1，当这个引用计数为0时，被视为准备回收的对象。")])])])])])])]),n("li",[e._v("内存管理\n"),n("ul",[n("li",[e._v("什么时候触发垃圾回收？\n"),n("ul",[n("li",[e._v("垃圾回收器周期性运行，如果分配的内存非常多，那么回收工作也会很艰巨，确定垃圾回收时间间隔就变成了一个值得思考的问题。")]),n("li",[e._v("IE6的垃圾回收是根据内存分配量运行的，当环境中的变量，对象，字符串达到一定数量时触发垃圾回收。垃圾回收器一直处于工作状态，严重影响浏览器性能。")]),n("li",[e._v("E7中，垃圾回收器会根据内存分配量与程序占用内存的比例进行动态调整，开始回收工作。")]),n("li",[e._v("合理的GC方案：\n"),n("ul",[n("li",[e._v("遍历所有可访问的对象;")]),n("li",[e._v("回收已不可访问的对象")])])]),n("li",[e._v("GC缺陷：\n"),n("ul",[n("li",[e._v("停止响应其他操作")])])]),n("li",[e._v("4、GC优化策略：\n"),n("ul",[n("li",[e._v("分代回收（Generation GC）")]),n("li",[e._v("增量GC")])])])])])])]),n("li",[e._v("开发过程中遇到的内存泄露情况，如何解决的？\n"),n("ul",[n("li",[e._v("定义和用法\n"),n("ul",[n("li",[e._v("内存泄露是指一块被分配的内存既不能使用，又不能回收，直到浏览器进程结束。C#和Java等语言采用了自动垃圾回收方法管理内存，几乎不会发生内存泄露。我们知道，浏览器中也是采用自动垃圾回收方法管理内存，但由于浏览器垃圾回收方法有bug，会产生内存泄露。")])])]),n("li",[e._v("内存泄露的几种情况:\n"),n("ul",[n("li",[e._v("当页面中元素被移除或替换时，若元素绑定的事件仍没被移除，在IE中不会作出恰当处理，此时要先手工移除事件，不然会存在内存泄露。")]),n("li",[e._v("由于是函数内定义函数，并且内部函数--事件回调的引用外暴了，形成了闭包。闭包可以维持函数内局部变量，使其得不到释放。")])])])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("将一个复杂的程序依据一定的规则(规范)封装成几个块(文件), 并进行组合在一起")]),t("li",[this._v("块的内部数据与实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("strong",[this._v("全局function模式 : 将不同的功能封装成不同的全局函数")]),t("ul",[t("li",[this._v("编码: 将不同的功能封装成不同的全局函数")]),t("li",[this._v("问题: 污染全局命名空间, 容易引起命名冲突或数据不安全，而且模块成员之间看不出直接关系")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("function m1(){\n  //...\n}\nfunction m2(){\n  //...\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("strong",[this._v("namespace模式 : 简单对象封装")]),t("ul",[t("li",[this._v("作用: 减少了全局变量，解决命名冲突")]),t("li",[this._v("问题: 数据不安全(外部可以直接修改模块内部的数据)")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("let myModule = {\n  data: 'www.baidu.com',\n  foo() {\n    console.log(`foo() ${this.data}`)\n  },\n  bar() {\n    console.log(`bar() ${this.data}`)\n  }\n}\nmyModule.data = 'other data' //能直接修改模块内部的数据\nmyModule.foo() // foo() other data\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("strong",[this._v("IIFE模式：匿名函数自调用(闭包)")]),t("ul",[t("li",[this._v("作用: 数据是私有的, 外部只能通过暴露的方法操作")]),t("li",[this._v("编码: 将数据和行为封装到一个函数内部, 通过给window添加属性来向外暴露接口")]),t("li",[this._v("问题: 如果当前这个模块依赖另一个模块怎么办?")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("// index.html文件\n<script type=\"text/javascript\" src=\"module.js\"><\/script>\n<script type=\"text/javascript\">\n    myModule.foo()\n    myModule.bar()\n    console.log(myModule.data) //undefined 不能访问模块内部数据\n    myModule.data = 'xxxx' //不是修改的模块内部的data\n    myModule.foo() //没有改变\n<\/script>\n// module.js文件\n(function(window) {\n  let data = 'www.baidu.com'\n  //操作数据的函数\n  function foo() {\n    //用于暴露有函数\n    console.log(`foo() ${data}`)\n  }\n  function bar() {\n    //用于暴露有函数\n    console.log(`bar() ${data}`)\n    otherFun() //内部调用\n  }\n  function otherFun() {\n    //内部私有的函数\n    console.log('otherFun()')\n  }\n  //暴露行为\n  window.myModule = { foo, bar } //ES6写法\n})(window)\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("strong",[this._v("IIFE模式增强 : 引入依赖")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("// module.js文件\n(function(window, $) {\n  let data = 'www.baidu.com'\n  //操作数据的函数\n  function foo() {\n    //用于暴露有函数\n    console.log(`foo() ${data}`)\n    $('body').css('background', 'red')\n  }\n  function bar() {\n    //用于暴露有函数\n    console.log(`bar() ${data}`)\n    otherFun() //内部调用\n  }\n  function otherFun() {\n    //内部私有的函数\n    console.log('otherFun()')\n  }\n  //暴露行为\n  window.myModule = { foo, bar }\n})(window, jQuery)\n // index.html文件\n  \x3c!-- 引入的js必须有一定顺序 --\x3e\n  <script type=\"text/javascript\" src=\"jquery-1.10.1.js\"><\/script>\n  <script type=\"text/javascript\" src=\"module.js\"><\/script>\n  <script type=\"text/javascript\">\n    myModule.foo()\n  <\/script>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上例子通过jquery方法将页面的背景颜色改成红色，所以必须先引入jQuery库，就把这个库当作参数传入。"),t("strong",[this._v("这样做除了保证模块的独立性，还使得模块之间的依赖关系变得明显")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("避免命名冲突(减少命名空间污染)")]),t("li",[this._v("更好的分离, 按需加载")]),t("li",[this._v("更高复用性")]),t("li",[this._v("高可维护性")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_4-引入多个-script-后出现出现问题"}},[this._v("4. 引入多个"),t("code",[this._v("<script>")]),this._v("后出现出现问题")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("请求过多")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("依赖模糊")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("难以维护")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Node 应用由模块组成，采用 CommonJS 模块规范。每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。"),t("strong",[this._v("在服务器端，模块的加载是运行时同步加载的；在浏览器端，模块需要提前编译打包处理。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("所有代码都运行在模块作用域，不会污染全局作用域。")]),t("li",[this._v("模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。")]),t("li",[this._v("模块加载的顺序，按照其在代码中出现的顺序。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("暴露模块："),t("code",[this._v("module.exports = value")]),this._v("或"),t("code",[this._v("exports.xxx = value")])]),t("li",[this._v("引入模块："),t("code",[this._v("require(xxx)")]),this._v(",如果是第三方模块，xxx为模块名；如果是自定义模块，xxx为模块文件路径")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("此处我们有个疑问："),t("strong",[this._v("CommonJS暴露的模块到底是什么?")]),this._v(" CommonJS规范规定，每个模块内部，module变量代表当前模块。这个变量是一个对象，它的exports属性（即module.exports）是对外的接口。"),t("strong",[this._v("加载某个模块，其实是加载该模块的module.exports属性")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("// example.js\nvar x = 5;\nvar addX = function (value) {\n  return value + x;\n};\nmodule.exports.x = x;\nmodule.exports.addX = addX;\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("var example = require('./example.js');//如果参数字符串以“./”开头，则表示加载的是一个位于相对路径\nconsole.log(example.x); // 5\nconsole.log(example.addX(1)); // 6\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("require命令用于加载模块文件。"),t("strong",[this._v("require命令的基本功能是，读入并执行一个JavaScript文件，然后返回该模块的exports对象。如果没有发现指定模块，会报错")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("CommonJS模块的加载机制是，输入的是被输出的值的拷贝。也就是说，一旦输出一个值，模块内部的变化就影响不到这个值")]),this._v("。这点与ES6模块化有重大差异（下文会介绍），请看下面这个例子：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("// lib.js\nvar counter = 3;\nfunction incCounter() {\n  counter++;\n}\nmodule.exports = {\n  counter: counter,\n  incCounter: incCounter,\n};\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("// main.js\nvar counter = require('./lib').counter;\nvar incCounter = require('./lib').incCounter;\n\nconsole.log(counter);  // 3\nincCounter();\nconsole.log(counter); // 3\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面代码说明，counter输出以后，lib.js模块内部的变化就影响不到counter了。"),t("strong",[this._v("这是因为counter是一个原始类型的值，会被缓存。除非写成一个函数，才能得到内部变动后的值")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("注意：用npm init 自动生成package.json时，package name(包名)不能有中文和大写")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('|-modules\n  |-module1.js\n  |-module2.js\n  |-module3.js\n|-app.js\n|-package.json\n  {\n    "name": "commonJS-node",\n    "version": "1.0.0"\n  }\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("npm install uniq --save // 用于数组去重\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("//module1.js\nmodule.exports = {\n  msg: 'module1',\n  foo() {\n    console.log(this.msg)\n  }\n}\n//module2.js\nmodule.exports = function() {\n  console.log('module2')\n}\n//module3.js\nexports.foo = function() {\n  console.log('foo() module3')\n}\nexports.arr = [1, 2, 3, 3, 2]\n// app.js文件\n// 引入第三方库，应该放置在最前面\nlet uniq = require('uniq')\nlet module1 = require('./modules/module1')\nlet module2 = require('./modules/module2')\nlet module3 = require('./modules/module3')\n\nmodule1.foo() //module1\nmodule2() //module2\nmodule3.foo() //foo() module3\nconsole.log(uniq(module3.arr)) //[ 1, 2, 3 ]\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("命令行输入"),t("code",[this._v("node app.js")]),this._v("，运行JS文件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('|-js\n  |-dist //打包生成文件的目录\n  |-src //源码所在的目录\n    |-module1.js\n    |-module2.js\n    |-module3.js\n    |-app.js //应用主源文件\n|-index.html //运行于浏览器上\n|-package.json\n  {\n    "name": "browserify-test",\n    "version": "1.0.0"\n  }\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("全局: npm install browserify -g")]),t("li",[this._v("局部: npm install browserify --save-dev")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("注意："),n("code",[e._v("index.html")]),e._v("文件要运行在浏览器上，需要借助browserify将"),n("code",[e._v("app.js")]),e._v("文件打包编译，如果直接在"),n("code",[e._v("index.html")]),e._v("引入"),n("code",[e._v("app.js")]),e._v("就会报错！")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("根目录下运行"),t("code",[this._v("browserify js/src/app.js -o js/dist/bundle.js")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在index.html文件中引入"),t("code",[this._v('<script type="text/javascript" src="js/dist/bundle.js"><\/script>')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数。由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以CommonJS规范比较适用。但是，"),t("strong",[this._v("如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用AMD规范")]),this._v("。此外AMD规范比CommonJS规范在浏览器端实现要来着早。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("定义暴露模块")]),this._v(":")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("//定义没有依赖的模块\ndefine(function(){\n   return 模块\n})\n//定义有依赖的模块\ndefine(['module1', 'module2'], function(m1, m2){\n   return 模块\n})\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("引入使用模块")]),this._v(":")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("require(['module1', 'module2'], function(m1, m2){\n   使用m1/m2\n})\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("未使用AMD规范")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('// dataService.js文件\n(function (window) {\n  let msg = \'www.baidu.com\'\n  function getMsg() {\n    return msg.toUpperCase()\n  }\n  window.dataService = {getMsg}\n})(window)\n // alerter.js文件\n(function (window, dataService) {\n  let name = \'Tom\'\n  function showMsg() {\n    alert(dataService.getMsg() + \', \' + name)\n  }\n  window.alerter = {showMsg}\n})(window, dataService)\n// main.js文件\n(function (alerter) {\n  alerter.showMsg()\n})(alerter)\n// index.html文件\n<div><h1>Modular Demo 1: 未使用AMD(require.js)</h1></div>\n<script type="text/javascript" src="js/modules/dataService.js"><\/script>\n<script type="text/javascript" src="js/modules/alerter.js"><\/script>\n<script type="text/javascript" src="js/main.js"><\/script>\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这种方式缺点很明显："),t("strong",[this._v("首先会发送多个请求，其次引入的js文件顺序不能搞错，否则会报错！")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("使用require.js")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("RequireJS是一个工具库，主要用于客户端的模块管理。它的模块管理遵守AMD规范，"),t("strong",[this._v("RequireJS的基本思想是，通过define方法，将代码定义为模块；通过require方法，实现代码的模块加载")]),this._v("。\n接下来介绍AMD规范在浏览器实现的步骤：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("官网: "),t("code",[this._v("http://www.requirejs.cn/")])]),t("li",[this._v("github : "),t("code",[this._v("https://github.com/requirejs/requirejs")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("|-js\n  |-libs\n    |-require.js\n  |-modules\n    |-alerter.js\n    |-dataService.js\n  |-main.js\n|-index.html\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("// dataService.js文件 \n// 定义没有依赖的模块\ndefine(function() {\n  let msg = 'www.baidu.com'\n  function getMsg() {\n    return msg.toUpperCase()\n  }\n  return { getMsg } // 暴露模块\n})\n//alerter.js文件\n// 定义有依赖的模块\ndefine(['dataService'], function(dataService) {\n  let name = 'Tom'\n  function showMsg() {\n    alert(dataService.getMsg() + ', ' + name)\n  }\n  // 暴露模块\n  return { showMsg }\n})\n// main.js文件\n(function() {\n  require.config({\n    baseUrl: 'js/', //基本路径 出发点在根目录下\n    paths: {\n      //映射: 模块标识名: 路径\n      alerter: './modules/alerter', //此处不能写成alerter.js,会报错\n      dataService: './modules/dataService'\n    }\n  })\n  require(['alerter'], function(alerter) {\n    alerter.showMsg()\n  })\n})()\n// index.html文件\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Modular Demo</title>\n  </head>\n  <body>\n    \x3c!-- 引入require.js并指定js主文件的入口 --\x3e\n    <script data-main=\"js/main\" src=\"js/libs/require.js\"><\/script>\n  </body>\n</html>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在index.html引入 "),t("code",[this._v('<script data-main="js/main" src="js/libs/require.js"><\/script>')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("// alerter.js文件\ndefine(['dataService', 'jquery'], function(dataService, $) {\n  let name = 'Tom'\n  function showMsg() {\n    alert(dataService.getMsg() + ', ' + name)\n  }\n  $('body').css('background', 'green')\n  // 暴露模块\n  return { showMsg }\n})\n// main.js文件\n(function() {\n  require.config({\n    baseUrl: 'js/', //基本路径 出发点在根目录下\n    paths: {\n      //自定义模块\n      alerter: './modules/alerter', //此处不能写成alerter.js,会报错\n      dataService: './modules/dataService',\n      // 第三方库模块\n      jquery: './libs/jquery-1.10.1' //注意：写成jQuery会报错\n    }\n  })\n  require(['alerter'], function(alerter) {\n    alerter.showMsg()\n  })\n})()\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上例是在alerter.js文件中引入jQuery第三方库，main.js文件也要有相应的路径配置。\n"),t("strong",[this._v("小结")]),this._v("：通过两者的比较，可以得出"),t("strong",[this._v("AMD模块定义的方法非常清晰，不会污染全局环境，能够清楚地显示依赖关系")]),this._v("。AMD模式可以用于浏览器环境，并且允许非同步加载模块，也可以根据需要动态加载模块。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("定义暴露模块：")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("//定义没有依赖的模块\ndefine(function(require, exports, module){\n  exports.xxx = value\n  module.exports = value\n})\n//定义有依赖的模块\ndefine(function(require, exports, module){\n  //引入依赖模块(同步)\n  var module2 = require('./module2')\n  //引入依赖模块(异步)\n    require.async('./module3', function (m3) {\n    })\n  //暴露模块\n  exports.xxx = value\n})\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("引入使用模块：")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("define(function (require) {\n  var m1 = require('./module1')\n  var m4 = require('./module4')\n  m1.show()\n  m4.show()\n})\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("官网: http://seajs.org/")]),t("li",[this._v("github : https://github.com/seajs/seajs")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("|-js\n  |-libs\n    |-sea.js\n  |-modules\n    |-module1.js\n    |-module2.js\n    |-module3.js\n    |-module4.js\n    |-main.js\n|-index.html\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("// module1.js文件\ndefine(function (require, exports, module) {\n  //内部变量数据\n  var data = 'atguigu.com'\n  //内部函数\n  function show() {\n    console.log('module1 show() ' + data)\n  }\n  //向外暴露\n  exports.show = show\n})\n// module2.js文件\ndefine(function (require, exports, module) {\n  module.exports = {\n    msg: 'I Will Back'\n  }\n})\n// module3.js文件\ndefine(function(require, exports, module) {\n  const API_KEY = 'abc123'\n  exports.API_KEY = API_KEY\n})\n// module4.js文件\ndefine(function (require, exports, module) {\n  //引入依赖模块(同步)\n  var module2 = require('./module2')\n  function show() {\n    console.log('module4 show() ' + module2.msg)\n  }\n  exports.show = show\n  //引入依赖模块(异步)\n  require.async('./module3', function (m3) {\n    console.log('异步引入依赖模块3  ' + m3.API_KEY)\n  })\n})\n// main.js文件\ndefine(function (require) {\n  var m1 = require('./module1')\n  var m4 = require('./module4')\n  m1.show()\n  m4.show()\n})\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<script type="text/javascript" src="js/libs/sea.js"><\/script>\n<script type="text/javascript">\n  seajs.use(\'./js/modules/main\')\n<\/script>\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("/** 定义模块 math.js **/\nvar basicNum = 0;\nvar add = function (a, b) {\n    return a + b;\n};\nexport { basicNum, add };\n/** 引用模块 **/\nimport { basicNum, add } from './math';\nfunction test(ele) {\n    ele.textContent = add(99 + basicNum);\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("// export-default.js\nexport default function () {\n  console.log('foo');\n}\n// import-default.js\nimport customName from './export-default';\ncustomName(); // 'foo'\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("① CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("② CommonJS 模块是运行时加载，ES6 模块是编译时输出接口")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("// lib.js\nexport let counter = 3;\nexport function incCounter() {\n  counter++;\n}\n// main.js\nimport { counter, incCounter } from './lib';\nconsole.log(counter); // 3\nincCounter();\nconsole.log(counter); // 4\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("ES6 模块的运行机制与 CommonJS 不一样。"),t("strong",[this._v("ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("简单来说就一句话："),t("strong",[this._v("使用Babel将ES6编译为ES5代码，使用Browserify编译打包js")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v(' {\n   "name" : "es6-babel-browserify",\n   "version" : "1.0.0"\n }\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("p",[this._v("npm install babel-cli browserify -g")])]),t("li",[t("p",[this._v("npm install babel-preset-es2015 --save-dev")])]),t("li",[t("p",[this._v("preset 预设(将es6转换成es5的所有插件打包)")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('  {\n    "presets": ["es2015"]\n  }\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("//module1.js文件\n// 分别暴露\nexport function foo() {\n  console.log('foo() module1')\n}\nexport function bar() {\n  console.log('bar() module1')\n}\n//module2.js文件\n// 统一暴露\nfunction fun1() {\n  console.log('fun1() module2')\n}\nfunction fun2() {\n  console.log('fun2() module2')\n}\nexport { fun1, fun2 }\n//module3.js文件\n// 默认暴露 可以暴露任意数据类项，暴露什么数据，接收到就是什么数据\nexport default () => {\n  console.log('默认暴露')\n}\n// app.js文件\nimport { foo, bar } from './module1'\nimport { fun1, fun2 } from './module2'\nimport module3 from './module3'\nfoo()\nbar()\nfun1()\nfun2()\nmodule3()\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("使用Babel将ES6编译为ES5代码(但包含CommonJS语法) : "),t("code",[this._v("babel js/src -d js/lib")])]),t("li",[this._v("使用Browserify编译js : "),t("code",[this._v("browserify js/lib/app.js -o js/lib/bundle.js")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<script type="text/javascript" src="js/lib/bundle.js"><\/script>\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("此外第三方库(以jQuery为例)如何引入呢")]),this._v("？\n首先安装依赖"),t("code",[this._v("npm install jquery@1")]),this._v("\n然后在app.js文件中引入")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("//app.js文件\nimport { foo, bar } from './module1'\nimport { fun1, fun2 } from './module2'\nimport module3 from './module3'\nimport $ from 'jquery'\n\nfoo()\nbar()\nfun1()\nfun2()\nmodule3()\n$('body').css('background', 'green')\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("CommonJS规范主要用于服务端编程，加载模块是同步的，这并不适合在浏览器环境，因为同步意味着阻塞加载，浏览器资源是异步加载的，因此有了AMD CMD解决方案。")]),t("li",[this._v("AMD规范在浏览器环境中异步加载模块，而且可以并行加载多个模块。不过，AMD规范开发成本高，代码的阅读和书写比较困难，模块定义方式的语义不顺畅。")]),t("li",[this._v("CMD规范与AMD规范很相似，都用于浏览器编程，依赖就近，延迟执行，可以很容易在Node.js中运行。不过，依赖SPM 打包，模块的加载逻辑偏重")]),t("li",[t("strong",[this._v("ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案")]),this._v("。")])])}],!1,null,null,null);t.default=i.exports}}]);