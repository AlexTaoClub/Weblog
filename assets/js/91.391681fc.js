(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{350:function(t,e,n){"use strict";n.r(e);var s=n(0),i=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"nginx"}},[t._v("Nginx")]),n("h2",{attrs:{id:"简介"}},[t._v("简介")]),t._m(0),n("p",[t._v("这里有三个词很关键，我们来拆解一下，分别是是高性能、反向代理和 web 服务器；首先这个 web 服务器自不用多说，像我们熟知的 Apache、IIS、Tomcat 等都是 web 服务器；然后是高性能，一个服务器的性能自然是网站开发者最为关心的，那么服务器的性能如何来进行衡量呢？一般可以通过 CPU 和内存的使用量来进行衡量。经过笔者简单的并发测试，在 20000 个并发链接时，CPU 和内存占用也非常低，CPU 仅占 5%，内存占用也才 2MB 不到。")]),t._m(1),n("p",[n("a",{attrs:{href:"https://qiniu.xieyufei.com/blog/Front-Nginx/ab.png",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://qiniu.xieyufei.com/blog/Front-Nginx/ab.png",alt:"压力测试结果"}}),n("OutboundLink")],1)]),n("p",[n("a",{attrs:{href:"https://qiniu.xieyufei.com/blog/Front-Nginx/ab.png",target:"_blank",rel:"noopener noreferrer"}},[t._v("压力测试结果"),n("OutboundLink")],1)]),n("p",[t._v("我们看到总的请求时间（Time taken for tests）是 25 秒，平均每个请求耗时（Time per request）1.25 毫秒，在这么高的并发量下面，服务器响应性能还是挺不错的。")]),n("p",[t._v("然后是反向代理，与之对应的就是正向代理，这两者的区别也是面试中经常被问到的。我们先来看一下什么是正向代理，一个正向代理最典型的例子就是我们常用的“梯子”。")]),n("p",[n("a",{attrs:{href:"https://qiniu.xieyufei.com/blog/Front-Nginx/catch.png",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://qiniu.xieyufei.com/blog/Front-Nginx/catch.png",alt:"表情包"}}),n("OutboundLink")],1)]),n("p",[n("a",{attrs:{href:"https://qiniu.xieyufei.com/blog/Front-Nginx/catch.png",target:"_blank",rel:"noopener noreferrer"}},[t._v("表情包"),n("OutboundLink")],1)]),t._m(2),n("p",[n("a",{attrs:{href:"https://qiniu.xieyufei.com/blog/Front-Nginx/positive-proxy.jpg",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://qiniu.xieyufei.com/blog/Front-Nginx/positive-proxy.jpg",alt:"正向代理"}}),n("OutboundLink")],1)]),n("h3",{attrs:{id:"正向代理"}},[n("a",{attrs:{href:"https://qiniu.xieyufei.com/blog/Front-Nginx/positive-proxy.jpg",target:"_blank",rel:"noopener noreferrer"}},[t._v("正向代理"),n("OutboundLink")],1)]),n("p",[t._v("那么什么是反向代理呢？反向代理最典型的例子就是我们的 Nginx 服务器了；比如我们在访问某个网站时，由代理服务器去目标服务器获取数据后返回给客户端，这样就能够隐藏真实服务器的 IP 地址，只对外开放代理服务器，以防止外网对内网服务器的恶性攻击。")]),n("p",[n("a",{attrs:{href:"https://qiniu.xieyufei.com/blog/Front-Nginx/negative-proxy.jpg",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://qiniu.xieyufei.com/blog/Front-Nginx/negative-proxy.jpg",alt:"反向代理"}}),n("OutboundLink")],1)]),n("h3",{attrs:{id:"反向代理"}},[n("a",{attrs:{href:"https://qiniu.xieyufei.com/blog/Front-Nginx/negative-proxy.jpg",target:"_blank",rel:"noopener noreferrer"}},[t._v("反向代理"),n("OutboundLink")],1)]),n("p",[t._v("理解了上面两个典型的案例，相信大家对正向反向代理也了解了，我们总结一下：")]),t._m(3),n("h2",{attrs:{id:"安装配置"}},[t._v("安装配置")]),n("p",[t._v("Nginx 安装程序分为 Linux 版和 Windows 版，Windows 版本的 Nginx 下载解压后就可以直接运行了，而 Linux 版本的需要 make、configure 等命令编译安装，好处是可以方便灵活的编译不同的模块到 Nginx；网上也有很多的安装教程，这里就不再赘述了，可以从"),n("a",{attrs:{href:"http://nginx.org/en/download.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网"),n("OutboundLink")],1),t._v("下载适合自己的版本，下载好后我们来看一下他的目录结构：")]),t._m(4),n("p",[t._v("我们经常用到的就是 conf 目录和 html 目录；而在根目录可以运行常用的一些命令对 Nginx 进行操作控制：")]),t._m(5),n("p",[t._v("我们看前四个命令会发现，这四个命令可以分为两种，重启和停止 Nginx，不过一种是强制的方式，另一种是优雅的方式；强制的方式就是让 Nginx 立即停止当前处理的所有请求，丢弃链接，停止工作；而优雅的方式是允许 Nginx 将当前正在处理的请求处理完成，但是不再接收新的请求，所有处理完成后再停止工作。")]),n("p",[t._v("我们再来看一下主要配置文件 nginx.conf 的基本结构：")]),t._m(6),n("p",[t._v("配置文件中主要可以分为以下几个块：")]),t._m(7),t._m(8),n("p",[t._v("很多时候，我们不会将所有的配置全都写在一个主配置文件，因为这样会显得冗长，也不知道每个模块是做什么用的；而是会根据项目来拆分多个配置文件，每个配置文件彼此独立，互不干扰，然后在主配置文件中引入；我们在 conf 目录下新建一个 projects 目录，然后可以新建多个.conf 配置文件：")]),t._m(9),n("p",[t._v("然后在主配置 nginx.conf 中将 projects 目录下的所有配置文件引入：")]),t._m(10),n("p",[t._v("这样我们可以直接在 projects 目录下新增.conf 后缀的配置文件，而不用修改主配置文件；但是我们修改完还不能确定是否会有错误，可以通过命令对配置文件进行检测：")]),t._m(11),n("p",[t._v("通过检测发现没有任何报错，就可以优雅的重启服务器了：")]),t._m(12),n("h2",{attrs:{id:"静态服务器"}},[t._v("静态服务器")]),n("p",[t._v("作为一个 web 服务器，最重要的就是能够对静态资源提供访问服务，我们的 Nginx 服务器可以用来托管一些静态的资源，比如 js、css、图片等，访问某一特定的静态资源路径时会转发到本地目录文件上；那么我们就来看 Nginx 是如何一步一步的通过域名配置、URI 配置以及目录配置来命中请求的。")]),n("p",[n("a",{attrs:{href:"https://qiniu.xieyufei.com/blog/Front-Nginx/welcome.png",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://qiniu.xieyufei.com/blog/Front-Nginx/welcome.png",alt:"Nginx首页"}}),n("OutboundLink")],1)]),n("p",[n("a",{attrs:{href:"https://qiniu.xieyufei.com/blog/Front-Nginx/welcome.png",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nginx 首页"),n("OutboundLink")],1)]),n("h2",{attrs:{id:"server-name-配置"}},[t._v("server_name 配置")]),t._m(13),n("ul",[n("li",[t._v("精确的域名，如"),n("a",{attrs:{href:"http://www.my.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("www.my.com"),n("OutboundLink")],1)]),n("li")]),t._m(14),n("p",[t._v("在上面正则表达式中，"),n("code",[t._v("^")]),t._v("表示以 www 开头，紧跟一个或多个数字（\\d+），然后跟上域名 my.com，最后以"),n("code",[t._v("$")]),t._v("结尾；因此上面的表达式可以匹配的域名比如 www1.my.com，但是"),n("a",{attrs:{href:"http://www.my.xn--com-928dl06dwp4d./",target:"_blank",rel:"noopener noreferrer"}},[t._v("www.my.com 就不行。"),n("OutboundLink")],1)]),n("p",[t._v("正则表达式还支持字符串捕获功能，即将正则表达式匹配成功的名称中的一部分字符串截取出来，放在变量中供后面使用；比如将 server_name 进行如下设置：")]),t._m(15),t._m(16),t._m(17),n("p",[t._v("这样就只需要一个 server 块来完成多个站点的配置。")]),n("p",[t._v("nginx 允许一个虚拟主机有多个域名，因此我们可以给 server_name 同时配置多个域名，多个之间以空格分隔：")]),t._m(18),n("p",[t._v("由于 server_name 支持以上三种配置方式，如果出现多个 server 块同时匹配了相同的域名，那么这个请求交给哪个 server 呢？因此优先级顺序如下：")]),t._m(19),t._m(20),t._m(21),t._m(22),n("p",[n("a",{attrs:{href:"https://qiniu.xieyufei.com/blog/Front-Nginx/fireware.png",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://qiniu.xieyufei.com/blog/Front-Nginx/fireware.png",alt:"Windows防火墙"}}),n("OutboundLink")],1)]),n("p",[n("a",{attrs:{href:"https://qiniu.xieyufei.com/blog/Front-Nginx/fireware.png",target:"_blank",rel:"noopener noreferrer"}},[t._v("Windows 防火墙"),n("OutboundLink")],1)]),t._m(23),t._m(24),n("p",[t._v("这样我们不仅可以通过域名 a.com、b.com、c.com 来访问，也能通过 ip 的方式。")]),n("h2",{attrs:{id:"location-配置"}},[t._v("location 配置")]),n("p",[t._v("location 用于匹配不同的 URI 请求，它的语法如下：")]),t._m(25),t._m(26),t._m(27),n("p",[t._v("我们来看下每种匹配规则能匹配的 url，首先不填代表的话表示前缀匹配，如果我们有多个相似的前缀匹配：")]),t._m(28),t._m(29),t._m(30),t._m(31),t._m(32),t._m(33),t._m(34),t._m(35),t._m(36),n("p",[t._v("如果我们的 URI 匹配到了多个 location，其并不完全按照在配置文件中出现的顺序来进行匹配，URI 会按照如下规则进行匹配：")]),t._m(37),t._m(38),n("h2",{attrs:{id:"请求目录配置"}},[t._v("请求目录配置")]),t._m(39),t._m(40),t._m(41),t._m(42),t._m(43),t._m(44),t._m(45),n("h2",{attrs:{id:"访问权限控制"}},[t._v("访问权限控制")]),t._m(46),n("p",[t._v("假如局域网还有两个设备，我们只能让这两个设备的 ip 通过访问：")]),t._m(47),n("p",[t._v("deny 和 allow 指令是由 ngx_http_access_module 模块提供，Windows 版本的 Nginx 并不包含该模块。")]),n("p",[t._v("还可以对前端的.map 文件进行访问权限控制，打包后的 map 文件一般会放在服务器上，但是如果能对所有人开放，别人就能查看到对应源码；因此我们可以控制只有公司的 ip 才有访问权限：")]),n("h2",{attrs:{id:"try-files"}},[t._v("try_files")]),t._m(48),t._m(49),t._m(50),t._m(51),t._m(52),t._m(53),t._m(54),n("h2",{attrs:{id:"gzip"}},[t._v("gzip")]),n("p",[t._v("我们都知道在服务端开启 gzip 压缩能够使得 js、css、html 等文件在传输时大幅提高访问速度，优化网站性能；gzip 压缩后的文件大小可以变为原来的 30%甚至更小；而对于图片、视频、音频等其他多媒体文件，因为压缩效果不好，所以不会开启压缩。")]),n("p",[t._v("gzip 压缩本质上是服务器端压缩，传输到浏览器后解压解析，我们来看下 gzip 的原理示意：")]),n("p",[n("a",{attrs:{href:"https://qiniu.xieyufei.com/blog/Front-Nginx/gzip.jpg",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://qiniu.xieyufei.com/blog/Front-Nginx/gzip.jpg",alt:"Gzip原理"}}),n("OutboundLink")],1)]),n("p",[n("a",{attrs:{href:"https://qiniu.xieyufei.com/blog/Front-Nginx/gzip.jpg",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gzip 原理"),n("OutboundLink")],1)]),n("p",[t._v("可以看到在请求和相应头上分别加了 accept-encoding 和 content-encoding 来进行传输；我们可以通过一个 js 的请求数据来查看：")]),n("p",[n("a",{attrs:{href:"https://qiniu.xieyufei.com/blog/Front-Nginx/gzip-header.png",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://qiniu.xieyufei.com/blog/Front-Nginx/gzip-header.png",alt:"Gzip请求响应头"}}),n("OutboundLink")],1)]),n("p",[n("a",{attrs:{href:"https://qiniu.xieyufei.com/blog/Front-Nginx/gzip-header.png",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gzip 请求响应头"),n("OutboundLink")],1)]),n("p",[t._v("既然 gzip 有这么多的好处，我们来看下 nginx 如何进行配置，gzip 的配置可以在 http 块或者 server 块中：")]),t._m(55),n("h2",{attrs:{id:"密码控制"}},[t._v("密码控制")]),n("p",[t._v("对于一些简单的页面，我们想要通过密码来限制其他用户的访问，但是又不想接入复杂的账号体系，Nginx 提供了简单的账号密码控制；首先我们通过 Linux 的工具创建一个密码本存放账号密码：")]),t._m(56),t._m(57),t._m(58),n("p",[t._v("重启 nginx，再次访问站点就会出现需要身份验证的弹框了。")]),n("h1",{attrs:{id:"反向代理-2"}},[t._v("反向代理")]),n("p",[t._v("上面我们介绍了正向代理和反向代理的区别，反向代理功能是 nginx 的三大主要功能之一（静态 web 服务器、反向代理、负载均衡）。反向代理不需要额外的模块，默认自带 proxy_pass 和 fastcgi_pass 指令，通过在 location 块中配置即可实现：")]),t._m(59),t._m(60),t._m(61),t._m(62),t._m(63),t._m(64),t._m(65),t._m(66),t._m(67),t._m(68),n("p",[t._v("在配置反向代理时，我们还可以修改代理请求的请求参数：")]),t._m(69),n("p",[t._v("经过反向代理后，由于客户端和 web 服务器之间增加了一个代理层，因此 web 服务器无法拿到客户端请求的 host 和真实 ip，我们通过 proxy_set_header 指令修改代理请求的头部；host和remote_addr 是用户真实的 host 和 ip，这里作为变量传入 Host 和 X-Real-IP 字段，因此我们在客户端服务器想要获取真实 ip 就可以通过 request.getAttribute(“X-real-ip”)的方式。")]),n("h1",{attrs:{id:"负载均衡"}},[t._v("负载均衡")]),n("p",[t._v("随着互联网的发展，用户规模的增加，服务器的压力也越来越大，如果只使用一台服务器有时候不能承受流量的压力，这时我们就需要将部分流量分散到多台服务器上，使得每台服务器都均衡的承担压力。")]),n("p",[t._v("nginx 负载均衡目前支持六种策略：轮询策略、加权轮询策略、ip_hash 策略、url_hash 策略、fair 策略和 sticky 策略；六种策略可以分为两大类，内置策略（轮询、加权轮询、ip_hash）和扩展策略（url_hash、fair、sticky）；默认情况下内置策略自动编译在 Nginx 中，而扩展策略需要额外安装。")]),n("p",[t._v("既然是负载，那么我们需要启用多台服务器；这里为了方便演示，我们在一台电脑上运行 node 脚本来模拟 3 台服务器；同时为了方便看到每台服务器有多少流量，每访问一次就计数一次：")]),t._m(70),n("p",[t._v("然后我们修改端口号，这样我们就有 8080、8081、8082 三个服务器了。")]),n("h2",{attrs:{id:"轮询策略"}},[t._v("轮询策略")]),n("p",[t._v("轮询策略，顾名思义，就是按照请求顺序，逐一分配到不同的服务器节点；如果某台服务器出现问题，会自动剔除。")]),t._m(71),t._m(72),t._m(73),n("p",[t._v("最后统计每台服务器的结果，每台服务器的请求还是很平均的：")]),t._m(74),n("h2",{attrs:{id:"加权轮询策略"}},[t._v("加权轮询策略")]),n("p",[t._v("加权轮询在基本轮询策略上考虑各服务器节点接受请求的权重，指定服务器节点被轮询的权重，主要用于服务器节点性能不均的情况。")]),t._m(75),t._m(76),n("p",[t._v("压力测试后统计服务器的请求结果，和我们配置的比率还是几乎相同的：")]),t._m(77),t._m(78),n("h2",{attrs:{id:"ip-hash-策略"}},[t._v("ip_hash 策略")]),n("p",[t._v("ip_hash 策略是将前端访问的 ip 进行 hash 操作后，然后根据 hash 的结果将请求分配到不同的节点上，这样使得每个 ip 都会固定访问服务节点；这样做的好处是用户的 session 只在一个后端服务器节点上，不必考虑一个 session 存在多台服务器节点出现 session 共享问题。")]),t._m(79),n("p",[t._v("压力测试后统计服务器的请求结果，我们发现所有的请求都到固定一台服务器上了：")]),t._m(80),n("h2",{attrs:{id:"url-hash-策略"}},[t._v("url_hash 策略")]),n("p",[t._v("url_hash 策略是将 url 地址进行 hash 操作，根据 hash 结果请求定向到同一服务器节点上；url_hash 的优点是能够提高后端缓存服务器的效率。")]),t._m(81),n("p",[t._v("压力测试后统计服务器的请求结果：")]),t._m(82),n("p",[t._v("如果我们切换不同的 url，/home、/list 等，都会分配到不同的服务器节点。")]),n("h2",{attrs:{id:"fair-策略"}},[t._v("fair 策略")]),n("p",[t._v("fair 策略请求转发到负载最小的后端服务器节点上。Nginx 通过服务器节点对响应时间来判断负载情况，响应时间最短的节点负载就相对较轻，Nginx 就会将前端请求转发到此服务器节点上。")]),t._m(83),t._m(84),n("p",[t._v("压力测试后统计服务器的请求结果：")]),t._m(85),n("h2",{attrs:{id:"sticky-策略"}},[t._v("sticky 策略")]),n("p",[t._v("sticky 策略是基于 cookie 的一种负载均衡解决方案，通过分发和识别 cookie，使来自同一个客户端的请求落在同一台服务器上，默认 cookie 标识名为 route。")]),n("p",[t._v("sticky 策略看起来和 ip_hash 策略类似，但是又有一定区别。假设在一个局域网内有 3 台电脑，他们有 3 个内网 IP，但是他们发起请求时，却只有一个外网 IP，如果使用 ip_hash 方式，则 Nginx 会将请求分配到同一服务器；如果使用 sticky 策略，则会把请求分配到不同服务器上，这是 ip_hash 无法做到的。")]),t._m(86),t._m(87),t._m(88),t._m(89),t._m(90),n("p",[t._v("我们通过浏览器来访问，在 cookie 中可以看到 sticky 下发的 cookie")]),n("p",[n("a",{attrs:{href:"https://qiniu.xieyufei.com/blog/Front-Nginx/sticky.png",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://qiniu.xieyufei.com/blog/Front-Nginx/sticky.png",alt:"sticky策略cookie"}}),n("OutboundLink")],1)]),n("p",[n("a",{attrs:{href:"https://qiniu.xieyufei.com/blog/Front-Nginx/sticky.png",target:"_blank",rel:"noopener noreferrer"}},[t._v("sticky 策略 cookie"),n("OutboundLink")],1)]),t._m(91),n("h2",{attrs:{id:"其他参数"}},[t._v("其他参数")]),n("p",[t._v("upstream 还有一些参数我们可以配合负载均衡：")]),t._m(92),t._m(93),n("h2",{attrs:{id:"常见处理"}},[t._v("常见处理")]),t._m(94)])}),[function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("Nginx 是一个高性能的 HTTP 和反向代理 web 服务器，同时也提供了 IMAP/POP3/SMTP 服务。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("我们可以通过一个 web 压力测试工具"),e("code",[this._v("Apache Bench")]),this._v("，对 Nginx 进行简单的压力测试；通过在命令行"),e("code",[this._v("ab -n 20000 -c 10000 [url]")]),this._v("，我们对 Nginx 的首页发起请求总数为 20000，并发数为 10000 的请求测试，测试结果如下：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("我们直接访问 Google，是访问不到的，但是如果我们使用了代理服务器，那么通过访问代理服务器就可以浏览 Google，这里的代理服务器就属于"),e("code",[this._v("正向代理")]),this._v("；通过正向代理我们可以访问原来无法访问的资源。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("正向代理，"),e("strong",[this._v("代理客户端")]),this._v("，服务端不知道实际发起请求的客户端。")]),e("li",[this._v("反向代理，"),e("strong",[this._v("代理服务端")]),this._v("，客户端不知道实际提供服务的服务端。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("├── conf            #所有配置文件的目录\n    ├── nginx.conf  #主配置文件\n    ├── mime.types  #媒体类型控制文件\n├── contrib         #存放一些实用工具\n├── docs            #文档资料\n├── html            #默认解析的静态文件目录\n├── logs            #日志目录\n├── sbin            #启动运行程序\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("nginx -s reopen \t#重启Nginx\nnginx -s reload \t#重新加载Nginx配置文件，然后以优雅的方式重启Nginx\nnginx -s stop   \t#强制停止Nginx服务\nnginx -s quit   \t#优雅地停止Nginx服务（即处理完所有请求后再停止服务）\nnginx -h \t\t    #打开帮助信息\nnginx -v \t\t    #显示版本信息并退出\nnginx -V\t\t    #显示版本和配置选项信息，然后退出\nnginx -t\t\t    #检测配置文件是否有语法错误，然后退出\nnginx -T\t \t    #检测配置文件是否有语法错误，转储并退出\nnginx -q \t  \t    #在检测配置文件期间屏蔽非错误信息\nnginx -p prefix   \t#设置前缀路径(默认是:/usr/share/nginx/)\nnginx -c filename\t#设置配置文件(默认是:/etc/nginx/nginx.conf)\nnginx -g directives #设置配置文件外的全局指令\nkillall nginx\t\t#杀死所有nginx进程\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("# nginx进程数，建议设置为等于CPU总核心数\nworker_processes  1;\n# 进程文件\npid        logs/nginx.pid;\n# 单个进程最大连接数\nevents {\n    worker_connections  1024;\n}\nhttp {\n    # 文件扩展名与类型映射表\n    include       mime.types;\n    # 默认文件类型\n    default_type  application/octet-stream;\n    # 开启gzip压缩\n    gzip  on;\n    sendfile        on;\n    keepalive_timeout  65;\n    server {\n        # 监听端口\n        listen       80;\n        server_name  localhost;\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n    }\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("全局模块：从配置文件开始到 events 块之间的内容，此处的配置影响 nginx 服务器整体的运⾏，⽐如 worker 进程的数量、错误⽇志的位置等")]),e("li")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("events：配置影响 nginx 服务器或与用户的网络连接。")]),e("li",[this._v("http："),e("strong",[this._v("可以嵌套多个 server")]),this._v("，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。")]),e("li",[this._v("server：配置虚拟主机的相关参数，一个 http 中可以有多个 server。")]),e("li",[this._v("location：配置请求的路由，以及各种页面的处理情况。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("# /conf/projects/home.conf\nserver {\n    listen       8080;\n    server_name  localhost;\n    location / {\n        root   html;\n        index  index.html index.htm;\n    }\n}\nserver {\n    listen       8081;\n    server_name  localhost;\n    location / {\n        root   html;\n        index  index.html index.htm;\n    }\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("http {\n    include       mime.types;\n    default_type  application/octet-stream;\n    gzip  on;\n    sendfile        on;\n    keepalive_timeout  65;\n    ## 引入projects目录下所有的配置文件\n    include       projects/*.conf;\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("nginx -t\n#nginx: the configuration file nginx/conf/nginx.conf syntax is ok\n#nginx: configuration file nginx/conf/nginx.conf test is successful\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("nginx -s reload\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在上面的配置中，我们主要是将"),e("code",[this._v("server_name")]),this._v("设置为"),e("code",[this._v("localhost")]),this._v("，但是这样仅能让局域网内的主机访问到；我们想要让广域网上的其他主机访问，可以将"),e("code",[this._v("server_name")]),this._v("匹配域名，它的参数值可以是以下几种：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("通配符名称，但通配符只能用在由三段字符串组成的名称的首段或尾段，如"),e("code",[this._v("*.my.com或者www.my.*")])]),e("li",[this._v("正则表达式，使用波浪号"),e("code",[this._v("~")]),this._v("作为正则表达式字符串的开始标记，如"),e("code",[this._v("~^www\\d+\\.my\\.com$")])]),e("li",[this._v("ip 地址")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("server {\n  listen       80;\n  server_name  ~^(.+)?\\.my\\.com$;\n  location / {\n    root   /usr/share/nginx/html/$1;\n    index  index.html index.htm;\n  }\n}\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("这样，通过二级域名 home.my.com 到达 Nginx 时，被"),n("code",[t._v("server_name")]),t._v("正则表达式捕获，将其中的"),n("code",[t._v("home")]),t._v("字符串存入"),n("code",[t._v("$1")]),t._v("变量中，我们在"),n("code",[t._v("/usr/share/nginx/html/home")]),t._v("目录下的静态资源就能通过 home.my.com 域名来访问了；我们服务器的目录就可以是这样的：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("/usr/share/nginx/html/\n    |- home\n        |- index.html\n    |- blog\n        |- index.html\n    |- mail\n        |- index.html\n    |- photo\n        |- index.html\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("server {\n  listen       80;\n  server_name  a.com b.com c.com;\n  # ...其他配置\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("精确匹配 server_name")]),e("li",[this._v("通配符在开始时匹配 server_name")]),e("li",[this._v("通配符在结尾时匹配 server_name")]),e("li",[this._v("正则表达式匹配 server_name")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果我们想让局域网内的设备访问 nginx，可以将"),e("code",[this._v("server_name")]),this._v("设置 ip 地址的方式：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("server {\n  listen       80;\n  server_name  localhost 192.168.1.101;\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果还不能访问，可以查看下是否是防火墙的原因，在防火墙允许通过的应用中将 Nginx 勾选（没有找到 Nginx 可以点击"),e("code",[this._v("允许其他应用")]),this._v("进行新增）：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("有时候我们还会见到将 server*name 设置为"),e("code",[this._v("*")]),this._v("（下划线），意味着 server_name 为空，即匹配全部的主机；我们可以配置 host，将 a.com、b.com 和 c.com 都指向本机，然后配置 nginx：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("server {\n  listen       80;\n  server_name  _;\n  location / {\n    root   html;\n    index  index.html index.htm;\n  }\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("location [ = | ~ | ~* | ^~ ] uri { ... }\nlocation @/name/ { … }\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("这里的"),n("code",[t._v("uri")]),t._v("就是待匹配的请求字符串，可以是不含正则的字符串，比如"),n("code",[t._v("/home")]),t._v("，称为"),n("code",[t._v("标准URI")]),t._v("；也可以是包含正则的字符串，比如"),n("code",[t._v("\\.html$")]),t._v("（表示以.html 结尾），称为"),n("code",[t._v("正则URI")]),t._v("。而方括号中的四种匹配符都是可选的，用来改变请求字符串与 URI 的匹配方式，我们来看下四种匹配符的解释：")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("table",[n("thead",[n("tr",[n("th",[t._v("匹配符")]),n("th",[t._v("解释")])])]),n("tbody",[n("tr",[n("td",[t._v("不填")]),n("td",[t._v("location 后没有参数，直接跟着标准 URI，表示前缀匹配，代表跟请求中的 URI 从头开始匹配")])]),n("tr",[n("td",[t._v("=")]),n("td",[t._v("用于标准 URI 前，要求请求字符串与其精准匹配，成功则立即处理，nginx 停止搜索其他匹配")])]),n("tr",[n("td",[t._v("^~")]),n("td",[t._v("用于标准 URI 前，要求一旦匹配就会立即处理，不再去匹配其他正则 URI，一般用来匹配目录")])]),n("tr",[n("td",[t._v("~")]),n("td",[t._v("用于正则 URI 前，表示 URI 包含正则表达式，"),n("code",[t._v("区分大小写")])])]),n("tr",[n("td",[t._v("~*")]),n("td",[t._v("用于正则 URI 前，表示 URI 包含正则表达式，"),n("code",[t._v("不区分大小写")])])]),n("tr",[n("td",[t._v("@")]),n("td",[t._v("定义一个命名的 location，@定义的 location 名字一般用在内部定向")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("location /pre/fix {\n  # ...\n}\nlocation /pre {\n  # ...\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("对于请求"),e("code",[this._v("/pre/fix/home")]),this._v("，根据最大匹配原则，匹配第一个 location。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("然后是"),e("code",[this._v("=")]),this._v("，要求路径完全匹配：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("location = /abc {\n  # ...\n}\n\n# /abc    匹配\n# /abcde  不匹配\n# /abc/   不匹配，带有结尾的/\n# /cde/abc不匹配\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("其次是"),e("code",[this._v("^~")]),this._v("最佳匹配，它的优先级高于正则表达式：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("location ^~ /login {\n  # ...\n}\n\n# /login      匹配\n# /loginss    匹配\n# /login/     匹配\n# /home/login 不匹配\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("接着是"),e("code",[this._v("~")]),this._v("正则表达式匹配，它区分大小写匹配（注意：windows 版本 nginx 不区分）：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("location ~ \\.(gif|jpg|png|js|css)$ {\n  # ...\n}\n# /bg.png     匹配\n# /bg.PNG     不匹配\n# /bg.png?a=1 匹配\n# /bg.jpeg    不匹配\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("~*")]),this._v("同样也是正则匹配，只不过它不区分大小写，这里就不再演示。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("= 精确匹配会第一个被处理。如果发现精确匹配，nginx 停止搜索其他匹配。")]),e("li")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",{attrs:{start:"3"}},[e("li",[this._v("普通字符匹配，正则表达式规则和长的块规则将被优先和查询匹配，也就是说如果该项匹配还需去看有没有正则表达式匹配和更长的匹配。")]),e("li",[this._v("^~ 则只匹配该规则，nginx 停止搜索其他匹配，否则 nginx 会继续处理其他 location 指令。")]),e("li",[this._v("最后匹配理带有"),e("code",[this._v("~")]),this._v("和"),e("code",[this._v("~*")]),this._v("的指令，如果找到相应的匹配，则 nginx 停止搜索其他匹配；当没有正则表达式或者没有正则表达式被匹配的情况下，那么匹配程度最高的逐字匹配指令会被使用。")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("在 location 匹配 URI 后，就需要在服务器指定的目录中寻找请求资源，而"),n("code",[t._v("root")]),t._v("和"),n("code",[t._v("alias")]),t._v("就是用来指定目录的两种指令，两者主要的区别在于如何解析 location 后面的路径；我们首先来看下 root 的用法，假如我们需要将"),n("code",[t._v("/data/")]),t._v("下面的所有路径转发到"),n("code",[t._v("html/roottest")]),t._v("下面：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("location /data/ {\n  root html/roottest;\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("当 location 接收到"),e("code",[this._v("/data/index.html")]),this._v("的请求时，会在"),e("code",[this._v("html/roottest/data/")]),this._v("目录下找到 index.html 文件并进行相应，root 会将 root 路径和 location 路径进行拼接。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("而 alias 指令则改变 location 接收到的请求路径，假如我们需要将"),e("code",[this._v("/data1/")]),this._v("下面的所有路径转发到"),e("code",[this._v("html/aliastest")]),this._v("下面：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("location /data1/ {\n  alias html/aliastes/;\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("当 location 接收到"),e("code",[this._v("/data1/index.html")]),this._v("的请求时，会在"),e("code",[this._v("html/aliastes/")]),this._v("目录下查找 index.html 文件并响应。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("需要注意的是：alias 指令后面的路径"),e("code",[this._v("必须以/结束")]),this._v("，否则会找不到文件，而 root 则可有可无。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("针对一些静态资源，我们可能会设置一些用户访问权限，比如和 js 一起打包产出的"),e("code",[this._v(".map")]),this._v("文件，会对源码进行映射；但是我们想让它只能针对公司的 ip 进行开放，对外网的 ip 禁止访问，这时就需要用到"),e("code",[this._v("allow")]),this._v("和"),e("code",[this._v("deny")]),this._v("命令了。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("location / {\n  alias html/aliastes/;\n  allow 192.168.1.102;\n  allow 192.168.1.103;\n  deny all;\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("前端在配置路由时经常会用到 history 路由模式，因此后台就需要映射对应的路由到 index.html；但是如果我们给每个路由都配置一个 location 就会比较繁琐，因此可以通过"),e("code",[this._v("try_files")]),this._v("指令来进行尝试解析；"),e("code",[this._v("try_files")]),this._v("的语法规则如下：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("# 格式1：\ntry_files file ... uri;\n# 格式2：\ntry_files file ... =code;\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("假设我们打包出来的单页面位于"),e("code",[this._v("/html/my/index.html")]),this._v("，我们想要将/login、/regisrer 等路由指向 index.html，我们可以配置 try_files：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("server {\n    listen       8080;\n    server_name  localhost;\n    location / {\n        try_files $uri /my/index.html;\n    }\n}\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("对于多页面的应用，假设我们的页面都放在"),n("code",[t._v("/html/pages/")]),t._v("目录下，我们想要访问"),n("code",[t._v("/login")]),t._v("时响应"),n("code",[t._v("/html/pages/login.html")]),t._v("页面，可以通过"),n("code",[t._v("$uri")]),t._v("：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("server {\n    listen       8080;\n    server_name  localhost;\n    location / {\n        index  index.html index.htm;\n        root html/pages;\n        try_files $uri /$uri.html $uri/index.html /index.html;\n    }\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这里我们设置 root 目录为 html/pages，当我们访问"),e("code",[this._v("/login")]),this._v("路由时，这里的$uri 就是/login，try_files 会去尝试在根目录下找"),e("code",[this._v("/login.html")]),this._v("；如果找不到就尝试"),e("code",[this._v("/login/index.html")]),this._v("，最后找不到则会默认返回 index.html。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('# 开启gzip\ngzip        on;\n# 设置gzip申请内存的大小\ngzip_buffers 32 4K;\n# 设置gzip压缩等级\n# 压缩级别 1-9，级别越高压缩率越大但耗CPU\ngzip_comp_level 6;\n# 正则匹配User-Agent中的值，匹配上则不进行gzip\ngzip_disable "MSIE [1-6]\\.(?!.*SV1)";\n# 设置允许压缩的页面最小字节数\ngzip_min_length 1024;\n# 设定进行gzip压缩的最小http版本\ngzip_http_version 1.0;\n# 需要压缩哪些响应类型的资源\ngzip_types application/javascript text/css text/xml;\n# 添加“Vary: Accept-Encoding”响应头\ngzip_vary on;\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("sudo yum install httpd-tools -y\nsudo htpasswd -c passwd/passwd admin\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("passwd/passwd")]),this._v("文件就是生成的密码文件，运行后会要求连续两次输入密码，成功后为 admin 用户添加了密码；然后我们就修改 nginx 的配置文件，对站点开启密码验证：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('server {\n  listen 8000;\n\tserver_name localhost;\n\tauth_basic "请输入账号密码";\n\tauth_basic_user_file /etc/nginx/conf/passwd/passwd;\n\tlocation / {\n    # .....\n\t}\n}\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("server {\n  listen 80;\n  server_name a.com;\n  location / {\n    proxy_pass http://192.168.1.102:8080;\n  }\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在配置 proxy_pass 时，我们需要注意 url 后面的"),e("code",[this._v("/")]),this._v("；当我们通过下面几种情况访问`/proxy/home.html``时：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("location /proxy/ {\n  proxy_pass http://192.168.1.102:8080/;\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("第一种情况 url 后面带上/，则会被代理到"),e("code",[this._v("http://192.168.1.102:8080/home.html")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("location /proxy/ {\n  proxy_pass http://192.168.1.102:8080;\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("第二种情况 url 后不带/，则会被代理到"),e("code",[this._v("http://192.168.1.102:8080/proxy/home.html")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("location /proxy/ {\n  proxy_pass http://192.168.1.102:8080/doc/;\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("第三种情况代理/doc/，则会被代理到"),e("code",[this._v("http://192.168.1.102:8080/doc/home.html")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("location /proxy/ {\n  proxy_pass http://192.168.1.102:8080/doc;\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("第四种情况代理/doc，则会被代理到"),e("code",[this._v("http://192.168.1.102:8080/dochome.html")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("location /proxy/ {\n  proxy_pass http://192.168.1.102:8080/;\n  # 修改请求的method\n  proxy_method GET;\n  # 修改请求的http协议版本\n  proxy_http_version 1.1;\n  # 将原来host字段放到转发请求中\n  proxy_set_header Host $host;\n  #获取真实ip\n  proxy_set_header X-Real-IP $remote_addr;\n  # 代理服务器每成功收到一个请求，就把请求来源IP地址添加到右边\n  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n  proxy_redirect  off;\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('const express = require("express");\nconst app = express();\nconst PORT = 8080;\nconst path = require("path");\nlet count = 0;\napp.get("*", (req, res) => {\n  count++;\n  res.sendFile(path.resolve(__dirname, "./index.html"));\n});\napp.listen(PORT);\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("upstream myserver {\n    server 192.168.1.101:8080;\n    server 192.168.1.101:8081;\n    server 192.168.1.101:8082;\n}\nserver {\n    listen      8070;\n    server_name _;\n    location / {\n        proxy_pass http://myserver;\n    }\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("我们还是通过测试工具"),e("code",[this._v("Apache Bench")]),this._v("来并发 100 个请求到 Nginx：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("ab -n 100 -c 10 http://localhost:8070/\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("8080：34个请求\n8081：33个请求\n8082：33个请求\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("通过在 server 节点后配置 weight 来设置权重，weight 的大小和访问比率成正比（weight 的默认值为 1）；我们给三台服务器设置访问比是"),e("code",[this._v("1:3:2")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("upstream myserver {\n    server 192.168.1.101:8080;\n    server 192.168.1.101:8081 weight=3;\n    server 192.168.1.101:8082 weight=2;\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("8080：16个请求\n8081：51个请求\n8082：33个请求\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("注：由于 weight 是内置，所以可以直接和其他策略配合使用。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("upstream myserver {\n    ip_hash;\n    server 192.168.1.101:8080;\n    server 192.168.1.101:8081 weight=3;\n    server 192.168.1.101:8082 weight=2;\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("8080：0个请求\n8081：0个请求\n8082：100个请求\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("upstream myserver {\n    hash $request_uri;\n    server 192.168.1.101:8080;\n    server 192.168.1.101:8081;\n    server 192.168.1.101:8082;\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("8080：0个请求\n8081：0个请求\n8082：100个请求\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("注：fair 策略默认不被编译进 nginx 内核，需要额外安装")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("upstream myserver {\n    fair;\n    server 192.168.1.101:8080;\n    server 192.168.1.101:8081;\n    server 192.168.1.101:8082;\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("8080：33个请求\n8081：33个请求\n8082：34个请求\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("注：sticky 策略默认不被编译进 nginx 内核，需要额外安装")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("upstream myserver {\n    sticky name=sticky_cookie expires=6h;\n    server 192.168.1.101:8080;\n    server 192.168.1.101:8081;\n    server 192.168.1.101:8082;\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("sticky 默认的 cookie 的名称是"),e("code",[this._v("route")]),this._v("，我们可以通过 name 修改，还有一些其他的 cookie 参数可以进行修改：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("[name=route]　　　　　　　设置用来记录会话的 cookie 名称")]),e("li",[this._v("[domain=.foo.bar]　　　　设置 cookie 作用的域名")]),e("li",[this._v("[path=/]　　　　　　　　 设置 cookie 作用的 URL 路径，默认根目录")]),e("li")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("[expires=1h] 　　　　　　 设置 cookie 的生存期，默认不设置，浏览器关闭即失效")]),e("li",[this._v("[hash=index|md5|sha1] 设置 cookie 中服务器的标识是用明文还是使用 md5 值，默认使用 md5")]),e("li",[this._v("[no_fallback]　　　　　　 设置该项，当 sticky 的后端机器挂了以后，nginx 返回 502 (Bad Gateway or Proxy Error) ，而不转发到其他服务器，不建议设置")]),e("li",[this._v("[secure]　　　　　　　　 设置启用安全的 cookie，需要 HTTPS 支持")]),e("li",[this._v("[httponly]　　　　　　　 允许 cookie 不通过 JS 泄漏，没用过")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("注：由于 cookie 最初由服务器端下发，如果客户端禁用 cookie，则 cookie 不会生效。")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("table",[n("thead",[n("tr",[n("th",[t._v("参数")]),n("th",[t._v("描述")])])]),n("tbody",[n("tr",[n("td",[t._v("fail_timeout")]),n("td",[t._v("与 max_fails 结合使用")])]),n("tr",[n("td",[t._v("max_fails")]),n("td",[t._v("设置在 fail_timeout 参数设置的时间内最大失败次数，如果在这个时间内，所有针对该服务器的请求都失败了，那么认为该服务器会被认为是停机了")])]),n("tr",[n("td",[t._v("fail_time")]),n("td",[t._v("服务器会被认为停机的时间长度,默认为 10s。")])]),n("tr",[n("td",[t._v("backup")]),n("td",[t._v("标记该服务器为备用服务器。当主服务器停止时，请求会被发送到它这里。")])]),n("tr",[n("td",[t._v("down")]),n("td",[t._v("标记服务器永久停机了。")])]),n("tr",[n("td",[t._v("keepalive")]),n("td",[t._v("连接数（keepalive 的值）指定了每个工作进程中保留的持续连接到 nginx 负载均衡器缓存的最大值。如果超过这个设置值的闲置进程想链接到 nginx 负载均衡器组，最先连接的将被关闭。")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("upstream backserver{\n  ip_hash;\n  # down 表示单前的server暂时不参与负载\n  server 192.168.1.101:8080 down;\n  server 192.168.1.101:8081;\n  # max_fails允许请求失败的次数默认为1，此处允许失败的次数为3。每次失败后暂停的时间为30s\n  server 192.168.1.101:8082 max_fails=3 fail_timeout=30s;\n  # 其它所有的非backup机器down或者忙的时候，请求backup机器\n  server 192.168.1.101:8083 backup;\n  # 连接到nginx负载均衡器的最大\n  keepalive 16;\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("base建议设置为如下，就可以部署在服务器任意目录了\nbase: './',\n\nnginx\nlocation /project {\n\t# 服务器项目包位置\n\talias     /home/application/dist;\n\tindex     index.html;\n}\n")])])])}],!1,null,null,null);e.default=i.exports}}]);