(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{354:function(n,s,a){"use strict";a.r(s);var t=a(0),e=Object(t.a)({},(function(){var n=this.$createElement;this._self._c;return this._m(0)}),[function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("div",{staticClass:"content"},[a("h3",{attrs:{id:"npm常用命令及包"}},[n._v("npm常用命令及包")]),a("ol",[a("li",[a("p",[a("strong",[n._v("安装命令")])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v(" npm install 模块名 -g                    //全局安装           \n npm install 模块名                       //本地安装\n npm install 模块1 模块2 模块3             //一次性安装多个\n npm install 模块名 --save-dev            //安装开发时依赖包\n npm install 模块名 --save                //安装运行时依赖包\n")])])])]),a("li",[a("p",[n._v("帮助")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("npm init                                 //创建一个package.json文件\nnpm cache clean                          //清除npm的缓存   ---   慎用\nnpm help\nnpm -v\nnpm help json                            //访问package.json的字段文档\nnpm list                                 //查看当前已经安装的模块\nnpm list --depth=0                       //查看当前已安装模块,限制输入的模块层级\n")])])])]),a("li",[a("p",[n._v("查看包各种属性")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("npm root                                 //查看项目中模块所在的目录\nnpm root -g                              //查看全局安装的模块所在目录\nnpm view 模块名 dependencies              //查看某个包对于各种包的依赖关系\nnpm view 模块名 repository.url            //查看包的源文件地址\nnpm view 模块名 engines                   //查看当前模块依赖的node最低版本号\nnpm view 模块名 version                   //查看到模块版本是该模块再远程仓库的版本号\nnpm list 模块名 version                   //查看当前项目中应用的某个模块的版本号\nnpm view 模块名 versions                  //查看模块的历史版本和当前版本\nnpm view 模块名                           //查看一个模块的所有信息\nnpm help folders                         //查看npm使用的所有文件夹\nnpm rebuild 模块名                        //用于更改包内容后进行重建\nnpm outdated                             //检查包是否已经过时\nnpm bugs 模块名                           //查看某个模块的bugs列表界面\n")])])])]),a("li",[a("p",[n._v("更新/卸载 node模块")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("npm update 模块名 \nnpm update 模块名 @版本号                  //当然你也可以update 该模块到指定版本\nnpm install 模块名@latest                 //安装到最新版本\nnpm uninstall 模块名                      //卸载 node模块\nnpm prune                                //清除未被使用到的模块\n")])])])])]),a("h2",{attrs:{id:"使用技巧"}},[n._v("使用技巧")]),a("p",[a("strong",[n._v("npm ci")])]),a("p",[a("code",[n._v("npm ci")]),n._v(" 根据 "),a("code",[n._v("package-lock.json")]),n._v(" 安装依赖，保证整个开发团队都使用版本完全一致的依赖。")]),a("p",[a("code",[n._v("npm ci")]),n._v(" 加快 node 模块安装速度。")]),a("p",[n._v("**npm outdated **")]),a("p",[a("code",[n._v("npm outdated")]),n._v("。它会列出还没有升到当前最新版本的项目依赖。红色表示符合指定的语义化版本范围，理论上可以无脑升级（"),a("code",[n._v("npm update")]),n._v(" 会一次性升级所有红色依赖）。黄色表示不符合指定的语义化版本范围，比如大版本升级，升级可能会遇到兼容性问题。")]),a("p",[a("strong",[n._v("npm init -y")])]),a("p",[a("code",[n._v("npm init -y")]),n._v("  可以跳过问题，直接安装")]),a("h2",{attrs:{id:"发包"}},[n._v("发包")]),a("ol",[a("li",[n._v("注册npm账号")]),a("li",[n._v("新建文件夹，进入该文件夹，运行npm init，生成package.json文件")]),a("li",[n._v("将需要发布的代码放入该文件夹")]),a("li",[n._v("如果是第一次发布，运行 npm adduser，如果不是第一次发包，运行 npm login")]),a("li",[n._v("进入项目文件夹下，运行 npm publish 发布（命名为publish_demo）")])]),a("p",[n._v("发布完之后想修改一下如何操作呢（升级）\n首先：npm view publish_demo versions // 查看远端已经发布的publish_demo包的版本\n然后：将包的内容进行修改，修改完后作为一个新的版本就行提交")]),a("ol",[a("li",[n._v("修改版本号：使用 npm version <update_type> 进行修改，update_type 有三个参数\npatch：这个是补丁的意思，补丁最合适；\nminor：这个是小修小改；\nmajor：这个是大改咯；\n具体咋用：\n比如我想来个1.0.1版本，注意，是最后一位修改了增1，那么命令：npm version patch\n比如我想来个1.1.0版本，注意，是第二位修改了增1，那么命令： npm version minor\n比如我想来个2.0.0版本，注意，是第一位修改了增1，那么命令： npm version major")]),a("li",[n._v("第一步操作只是修改了本地的版本号，使用 npm publish上传到远端npm")])]),a("h2",{attrs:{id:"常见问题解决"}},[n._v("常见问题解决")]),a("h3",{attrs:{id:"node-sass-安装失败"}},[a("strong",[n._v("node-sass 安装失败")])]),a("h4",{attrs:{id:"_1-使用淘宝镜像源（推荐）"}},[n._v("1.使用淘宝镜像源（推荐）")]),a("p",[n._v("设置变量 sass_binary_site，指向淘宝镜像地址")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("npm i node-sass --sass_binary_site=https://npm.taobao.org/mirrors/node-sass/\n\n// 也可以设置系统环境变量的方式\n// linux、mac\nSASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ npm install node-sass\n// window\nset SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ && npm install node-sass\n")])])]),a("p",[n._v("设置全局镜像源")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("npm config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/\n")])])]),a("h4",{attrs:{id:"_2-使用-cnpm"}},[n._v("2.使用 cnpm")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("cnpm install node-sass\n")])])]),a("h4",{attrs:{id:"_3-创建-npmrc文件"}},[n._v("3.创建.npmrc文件")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("phantomjs_cdnurl=http://cnpmjs.org/downloads\nsass_binary_site=https://npm.taobao.org/mirrors/node-sass/\nregistry=https://registry.npm.taobao.org\n")])])])])}],!1,null,null,null);s.default=e.exports}}]);